
CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fcc  08007fcc  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd4  08007fd4  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd4  08007fd4  00017fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001ea0  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f9c  20001f9c  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000153aa  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffb  00000000  00000000  000354d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000384d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00039430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026be8  00000000  00000000  0003a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133a6  00000000  00000000  00060e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc90e  00000000  00000000  000741ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150afc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f40  00000000  00000000  00150b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000fc 	.word	0x200000fc
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007f44 	.word	0x08007f44

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000100 	.word	0x20000100
 80001e8:	08007f44 	.word	0x08007f44

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fb5b 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f81d 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8fd 	bl	800070c <MX_GPIO_Init>
  MX_ETH_Init();
 8000512:	f000 f883 	bl	800061c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000516:	f000 f8cf 	bl	80006b8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800051a:	f006 ffbf 	bl	800749c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  char* text = "Hello, World\n";
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <main+0x44>)
 8000520:	607b      	str	r3, [r7, #4]
  int text_len = strlen(text);
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff fe62 	bl	80001ec <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(text, text_len);
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b29b      	uxth	r3, r3
 8000530:	4619      	mov	r1, r3
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f007 f870 	bl	8007618 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053c:	f000 fbb2 	bl	8000ca4 <HAL_Delay>
	  CDC_Transmit_FS(text, text_len);
 8000540:	e7f4      	b.n	800052c <main+0x2c>
 8000542:	bf00      	nop
 8000544:	08007f5c 	.word	0x08007f5c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f007 fcec 	bl	8007f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	; 0xa8
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fbf5 	bl	8002dbc <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d8:	f000 f946 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fe56 	bl	80032ac <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f92f 	bl	8000868 <Error_Handler>
  }
}
 800060a:	bf00      	nop
 800060c:	3750      	adds	r7, #80	; 0x50
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ETH_Init+0x84>)
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <MX_ETH_Init+0x88>)
 8000624:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_ETH_Init+0x8c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_ETH_Init+0x8c>)
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_ETH_Init+0x8c>)
 8000634:	22e1      	movs	r2, #225	; 0xe1
 8000636:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ETH_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_ETH_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_ETH_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ETH_Init+0x84>)
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <MX_ETH_Init+0x8c>)
 800064e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_ETH_Init+0x84>)
 8000652:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000656:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_ETH_Init+0x84>)
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_ETH_Init+0x90>)
 800065c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_ETH_Init+0x84>)
 8000660:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_ETH_Init+0x94>)
 8000662:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_ETH_Init+0x84>)
 8000666:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800066a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_ETH_Init+0x84>)
 800066e:	f000 fc4f 	bl	8000f10 <HAL_ETH_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 f8f6 	bl	8000868 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800067c:	2238      	movs	r2, #56	; 0x38
 800067e:	2100      	movs	r1, #0
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MX_ETH_Init+0x98>)
 8000682:	f007 fc57 	bl	8007f34 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_ETH_Init+0x98>)
 8000688:	2221      	movs	r2, #33	; 0x21
 800068a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_ETH_Init+0x98>)
 800068e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000692:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_ETH_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000290 	.word	0x20000290
 80006a4:	40028000 	.word	0x40028000
 80006a8:	20000384 	.word	0x20000384
 80006ac:	200001f0 	.word	0x200001f0
 80006b0:	20000150 	.word	0x20000150
 80006b4:	20000118 	.word	0x20000118

080006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART3_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART3_UART_Init+0x4c>)
 80006f0:	f002 fffc 	bl	80036ec <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f8b5 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000340 	.word	0x20000340
 8000708:	40004800 	.word	0x40004800

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a4b      	ldr	r2, [pc, #300]	; (8000858 <MX_GPIO_Init+0x14c>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b49      	ldr	r3, [pc, #292]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	4b45      	ldr	r3, [pc, #276]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a44      	ldr	r2, [pc, #272]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b42      	ldr	r3, [pc, #264]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a3d      	ldr	r2, [pc, #244]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3b      	ldr	r3, [pc, #236]	; (8000858 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b37      	ldr	r3, [pc, #220]	; (8000858 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a36      	ldr	r2, [pc, #216]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b34      	ldr	r3, [pc, #208]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b30      	ldr	r3, [pc, #192]	; (8000858 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <MX_GPIO_Init+0x14c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b29      	ldr	r3, [pc, #164]	; (8000858 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a28      	ldr	r2, [pc, #160]	; (8000858 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007d0:	4822      	ldr	r0, [pc, #136]	; (800085c <MX_GPIO_Init+0x150>)
 80007d2:	f001 f85d 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	4821      	ldr	r0, [pc, #132]	; (8000860 <MX_GPIO_Init+0x154>)
 80007dc:	f001 f858 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	481b      	ldr	r0, [pc, #108]	; (8000864 <MX_GPIO_Init+0x158>)
 80007f8:	f000 fe9e 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	4811      	ldr	r0, [pc, #68]	; (800085c <MX_GPIO_Init+0x150>)
 8000816:	f000 fe8f 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <MX_GPIO_Init+0x154>)
 8000832:	f000 fe81 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_GPIO_Init+0x154>)
 800084a:	f000 fe75 	bl	8001538 <HAL_GPIO_Init>

}
 800084e:	bf00      	nop
 8000850:	3730      	adds	r7, #48	; 0x30
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40020400 	.word	0x40020400
 8000860:	40021800 	.word	0x40021800
 8000864:	40020800 	.word	0x40020800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a55      	ldr	r2, [pc, #340]	; (8000a38 <HAL_ETH_MspInit+0x174>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	f040 80a4 	bne.w	8000a30 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
 80008ec:	4b53      	ldr	r3, [pc, #332]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	4a52      	ldr	r2, [pc, #328]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f6:	6313      	str	r3, [r2, #48]	; 0x30
 80008f8:	4b50      	ldr	r3, [pc, #320]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000900:	623b      	str	r3, [r7, #32]
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090c:	4a4b      	ldr	r2, [pc, #300]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800090e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000912:	6313      	str	r3, [r2, #48]	; 0x30
 8000914:	4b49      	ldr	r3, [pc, #292]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800091c:	61fb      	str	r3, [r7, #28]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a44      	ldr	r2, [pc, #272]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800092a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000938:	61bb      	str	r3, [r7, #24]
 800093a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a3d      	ldr	r2, [pc, #244]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a36      	ldr	r2, [pc, #216]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
 8000968:	4b34      	ldr	r3, [pc, #208]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 800099a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009ac:	2332      	movs	r3, #50	; 0x32
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009bc:	230b      	movs	r3, #11
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	481e      	ldr	r0, [pc, #120]	; (8000a40 <HAL_ETH_MspInit+0x17c>)
 80009c8:	f000 fdb6 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009cc:	2386      	movs	r3, #134	; 0x86
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009dc:	230b      	movs	r3, #11
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	4817      	ldr	r0, [pc, #92]	; (8000a44 <HAL_ETH_MspInit+0x180>)
 80009e8:	f000 fda6 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009fe:	230b      	movs	r3, #11
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	480f      	ldr	r0, [pc, #60]	; (8000a48 <HAL_ETH_MspInit+0x184>)
 8000a0a:	f000 fd95 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a20:	230b      	movs	r3, #11
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <HAL_ETH_MspInit+0x188>)
 8000a2c:	f000 fd84 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3738      	adds	r7, #56	; 0x38
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40028000 	.word	0x40028000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <HAL_UART_MspInit+0x84>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12c      	bne.n	8000acc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a10      	ldr	r2, [pc, #64]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_UART_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000abc:	2307      	movs	r3, #7
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <HAL_UART_MspInit+0x8c>)
 8000ac8:	f000 fd36 	bl	8001538 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40004800 	.word	0x40004800
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020c00 	.word	0x40020c00

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler+0x4>

08000af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <BusFault_Handler+0x4>

08000af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <UsageFault_Handler+0x4>

08000afe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2c:	f000 f89a 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b38:	4802      	ldr	r0, [pc, #8]	; (8000b44 <OTG_FS_IRQHandler+0x10>)
 8000b3a:	f001 f812 	bl	8001b62 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20001870 	.word	0x20001870

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b72:	490e      	ldr	r1, [pc, #56]	; (8000bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b74:	4a0e      	ldr	r2, [pc, #56]	; (8000bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0b      	ldr	r2, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b88:	4c0b      	ldr	r4, [pc, #44]	; (8000bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b96:	f7ff ffd7 	bl	8000b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f007 f9a7 	bl	8007eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fcaf 	bl	8000500 <main>
  bx  lr    
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ba4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bac:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000bb0:	08007fdc 	.word	0x08007fdc
  ldr r2, =_sbss
 8000bb4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000bb8:	20001f9c 	.word	0x20001f9c

08000bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_Init+0x40>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_Init+0x40>)
 8000bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x40>)
 8000be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f94f 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe3e 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023c00 	.word	0x40023c00

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f967 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 f92f 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	2000038c 	.word	0x2000038c

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	2000038c 	.word	0x2000038c

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e06c      	b.n	8000ffc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d106      	bne.n	8000f3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2223      	movs	r2, #35	; 0x23
 8000f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fcc5 	bl	80008c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <HAL_ETH_Init+0xf4>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a30      	ldr	r2, [pc, #192]	; (8001004 <HAL_ETH_Init+0xf4>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <HAL_ETH_Init+0xf4>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f56:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <HAL_ETH_Init+0xf8>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	4a2b      	ldr	r2, [pc, #172]	; (8001008 <HAL_ETH_Init+0xf8>)
 8000f5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f60:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <HAL_ETH_Init+0xf8>)
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	4927      	ldr	r1, [pc, #156]	; (8001008 <HAL_ETH_Init+0xf8>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <HAL_ETH_Init+0xf8>)
 8000f72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6812      	ldr	r2, [r2, #0]
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f8c:	f7ff fe7e 	bl	8000c8c <HAL_GetTick>
 8000f90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000f92:	e011      	b.n	8000fb8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000f94:	f7ff fe7a 	bl	8000c8c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fa2:	d909      	bls.n	8000fb8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	22e0      	movs	r2, #224	; 0xe0
 8000fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e021      	b.n	8000ffc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e4      	bne.n	8000f94 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f944 	bl	8001258 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f9eb 	bl	80013ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 fa41 	bl	800145e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f9a9 	bl	800133c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40013800 	.word	0x40013800

0800100c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4b47      	ldr	r3, [pc, #284]	; (8001140 <ETH_SetMACConfig+0x134>)
 8001022:	4013      	ands	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	7c1b      	ldrb	r3, [r3, #16]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <ETH_SetMACConfig+0x28>
 800102e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001032:	e000      	b.n	8001036 <ETH_SetMACConfig+0x2a>
 8001034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7c5b      	ldrb	r3, [r3, #17]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <ETH_SetMACConfig+0x38>
 800103e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001042:	e000      	b.n	8001046 <ETH_SetMACConfig+0x3a>
 8001044:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001046:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800104c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	7fdb      	ldrb	r3, [r3, #31]
 8001052:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001054:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800105a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	7f92      	ldrb	r2, [r2, #30]
 8001060:	2a00      	cmp	r2, #0
 8001062:	d102      	bne.n	800106a <ETH_SetMACConfig+0x5e>
 8001064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001068:	e000      	b.n	800106c <ETH_SetMACConfig+0x60>
 800106a:	2200      	movs	r2, #0
                        macconf->Speed |
 800106c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	7f1b      	ldrb	r3, [r3, #28]
 8001072:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001074:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800107a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001082:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	f892 2020 	ldrb.w	r2, [r2, #32]
 800108a:	2a00      	cmp	r2, #0
 800108c:	d102      	bne.n	8001094 <ETH_SetMACConfig+0x88>
 800108e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001092:	e000      	b.n	8001096 <ETH_SetMACConfig+0x8a>
 8001094:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001096:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	7bdb      	ldrb	r3, [r3, #15]
 800109c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800109e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010ae:	4313      	orrs	r3, r2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fdec 	bl	8000ca4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80010e2:	4013      	ands	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80010f2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80010f8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001100:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001108:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001110:	4313      	orrs	r3, r2
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff fdbb 	bl	8000ca4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	ff20810f 	.word	0xff20810f

08001144 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	4b3d      	ldr	r3, [pc, #244]	; (8001254 <ETH_SetDMAConfig+0x110>)
 800115e:	4013      	ands	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	7b1b      	ldrb	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <ETH_SetDMAConfig+0x2c>
 800116a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800116e:	e000      	b.n	8001172 <ETH_SetDMAConfig+0x2e>
 8001170:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	7b5b      	ldrb	r3, [r3, #13]
 8001176:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001178:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	7f52      	ldrb	r2, [r2, #29]
 800117e:	2a00      	cmp	r2, #0
 8001180:	d102      	bne.n	8001188 <ETH_SetDMAConfig+0x44>
 8001182:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001186:	e000      	b.n	800118a <ETH_SetDMAConfig+0x46>
 8001188:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800118a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	7b9b      	ldrb	r3, [r3, #14]
 8001190:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001192:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001198:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	7f1b      	ldrb	r3, [r3, #28]
 800119e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80011a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	7f9b      	ldrb	r3, [r3, #30]
 80011a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80011a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011b8:	4313      	orrs	r3, r2
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c8:	461a      	mov	r2, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fd62 	bl	8000ca4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e8:	461a      	mov	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80011f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80011fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001204:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800120c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800120e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001216:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800121c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	6812      	ldr	r2, [r2, #0]
 8001222:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800122a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fd33 	bl	8000ca4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	f8de3f23 	.word	0xf8de3f23

08001258 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b0a6      	sub	sp, #152	; 0x98
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001260:	2301      	movs	r3, #1
 8001262:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001266:	2301      	movs	r3, #1
 8001268:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001276:	2301      	movs	r3, #1
 8001278:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001294:	2300      	movs	r3, #0
 8001296:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80012ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80012c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80012cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fe9a 	bl	800100c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80012d8:	2301      	movs	r3, #1
 80012da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80012dc:	2301      	movs	r3, #1
 80012de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80012e6:	2301      	movs	r3, #1
 80012e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80012fa:	2300      	movs	r3, #0
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001304:	2301      	movs	r3, #1
 8001306:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800130c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001318:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800131a:	2301      	movs	r3, #1
 800131c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4619      	mov	r1, r3
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff08 	bl	8001144 <ETH_SetDMAConfig>
}
 8001334:	bf00      	nop
 8001336:	3798      	adds	r7, #152	; 0x98
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3305      	adds	r3, #5
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	021b      	lsls	r3, r3, #8
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	3204      	adds	r2, #4
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <ETH_MACAddressConfig+0x68>)
 800135e:	4413      	add	r3, r2
 8001360:	461a      	mov	r2, r3
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3303      	adds	r3, #3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	061a      	lsls	r2, r3, #24
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3302      	adds	r3, #2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4313      	orrs	r3, r2
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	4313      	orrs	r3, r2
 8001388:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <ETH_MACAddressConfig+0x6c>)
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	6013      	str	r3, [r2, #0]
}
 8001396:	bf00      	nop
 8001398:	371c      	adds	r7, #28
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40028040 	.word	0x40028040
 80013a8:	40028044 	.word	0x40028044

080013ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	e03e      	b.n	8001438 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	3206      	adds	r2, #6
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d80c      	bhi.n	800141c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68d9      	ldr	r1, [r3, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	461a      	mov	r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	e004      	b.n	8001426 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	461a      	mov	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3301      	adds	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d9bd      	bls.n	80013ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001450:	611a      	str	r2, [r3, #16]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800145e:	b480      	push	{r7}
 8001460:	b085      	sub	sp, #20
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e046      	b.n	80014fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6919      	ldr	r1, [r3, #16]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	440b      	add	r3, r1
 800147c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80014b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	3212      	adds	r2, #18
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d80c      	bhi.n	80014ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6919      	ldr	r1, [r3, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	e004      	b.n	80014f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d9b5      	bls.n	800146c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152a:	60da      	str	r2, [r3, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e177      	b.n	8001844 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 8166 	bne.w	800183e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	2b02      	cmp	r3, #2
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80c0 	beq.w	800183e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b66      	ldr	r3, [pc, #408]	; (800185c <HAL_GPIO_Init+0x324>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a65      	ldr	r2, [pc, #404]	; (800185c <HAL_GPIO_Init+0x324>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_GPIO_Init+0x324>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a61      	ldr	r2, [pc, #388]	; (8001860 <HAL_GPIO_Init+0x328>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_GPIO_Init+0x32c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d037      	beq.n	8001776 <HAL_GPIO_Init+0x23e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a57      	ldr	r2, [pc, #348]	; (8001868 <HAL_GPIO_Init+0x330>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d031      	beq.n	8001772 <HAL_GPIO_Init+0x23a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a56      	ldr	r2, [pc, #344]	; (800186c <HAL_GPIO_Init+0x334>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x236>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a55      	ldr	r2, [pc, #340]	; (8001870 <HAL_GPIO_Init+0x338>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d025      	beq.n	800176a <HAL_GPIO_Init+0x232>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a54      	ldr	r2, [pc, #336]	; (8001874 <HAL_GPIO_Init+0x33c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01f      	beq.n	8001766 <HAL_GPIO_Init+0x22e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a53      	ldr	r2, [pc, #332]	; (8001878 <HAL_GPIO_Init+0x340>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x22a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a52      	ldr	r2, [pc, #328]	; (800187c <HAL_GPIO_Init+0x344>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a51      	ldr	r2, [pc, #324]	; (8001880 <HAL_GPIO_Init+0x348>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a50      	ldr	r2, [pc, #320]	; (8001884 <HAL_GPIO_Init+0x34c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4f      	ldr	r2, [pc, #316]	; (8001888 <HAL_GPIO_Init+0x350>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x21a>
 800174e:	2309      	movs	r3, #9
 8001750:	e012      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001752:	230a      	movs	r3, #10
 8001754:	e010      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001756:	2308      	movs	r3, #8
 8001758:	e00e      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800175a:	2307      	movs	r3, #7
 800175c:	e00c      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800175e:	2306      	movs	r3, #6
 8001760:	e00a      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001762:	2305      	movs	r3, #5
 8001764:	e008      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001766:	2304      	movs	r3, #4
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800176a:	2303      	movs	r3, #3
 800176c:	e004      	b.n	8001778 <HAL_GPIO_Init+0x240>
 800176e:	2302      	movs	r3, #2
 8001770:	e002      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_GPIO_Init+0x240>
 8001776:	2300      	movs	r3, #0
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f002 0203 	and.w	r2, r2, #3
 800177e:	0092      	lsls	r2, r2, #2
 8001780:	4093      	lsls	r3, r2
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001788:	4935      	ldr	r1, [pc, #212]	; (8001860 <HAL_GPIO_Init+0x328>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_GPIO_Init+0x354>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <HAL_GPIO_Init+0x354>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_GPIO_Init+0x354>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017e4:	4a29      	ldr	r2, [pc, #164]	; (800188c <HAL_GPIO_Init+0x354>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_GPIO_Init+0x354>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <HAL_GPIO_Init+0x354>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001814:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_GPIO_Init+0x354>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001838:	4a14      	ldr	r2, [pc, #80]	; (800188c <HAL_GPIO_Init+0x354>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3301      	adds	r3, #1
 8001842:	61fb      	str	r3, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	f67f ae84 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800
 8001864:	40020000 	.word	0x40020000
 8001868:	40020400 	.word	0x40020400
 800186c:	40020800 	.word	0x40020800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40021000 	.word	0x40021000
 8001878:	40021400 	.word	0x40021400
 800187c:	40021800 	.word	0x40021800
 8001880:	40021c00 	.word	0x40021c00
 8001884:	40022000 	.word	0x40022000
 8001888:	40022400 	.word	0x40022400
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c4:	b08f      	sub	sp, #60	; 0x3c
 80018c6:	af0a      	add	r7, sp, #40	; 0x28
 80018c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e10f      	b.n	8001af4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 ffda 	bl	80078a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2203      	movs	r2, #3
 80018f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fac1 	bl	8003e9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	687e      	ldr	r6, [r7, #4]
 8001920:	466d      	mov	r5, sp
 8001922:	f106 0410 	add.w	r4, r6, #16
 8001926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800192c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800192e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001932:	e885 0003 	stmia.w	r5, {r0, r1}
 8001936:	1d33      	adds	r3, r6, #4
 8001938:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	f002 f998 	bl	8003c70 <USB_CoreInit>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2202      	movs	r2, #2
 800194a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0d0      	b.n	8001af4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f002 faaf 	bl	8003ebc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	e04a      	b.n	80019fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	333d      	adds	r3, #61	; 0x3d
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	333c      	adds	r3, #60	; 0x3c
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	b298      	uxth	r0, r3
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3344      	adds	r3, #68	; 0x44
 80019a0:	4602      	mov	r2, r0
 80019a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	3340      	adds	r3, #64	; 0x40
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3348      	adds	r3, #72	; 0x48
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	334c      	adds	r3, #76	; 0x4c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3354      	adds	r3, #84	; 0x54
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	3301      	adds	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d3af      	bcc.n	8001964 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
 8001a08:	e044      	b.n	8001a94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a20:	7bfa      	ldrb	r2, [r7, #15]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a36:	7bfa      	ldrb	r2, [r7, #15]
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a4c:	7bfa      	ldrb	r2, [r7, #15]
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4413      	add	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a78:	7bfa      	ldrb	r2, [r7, #15]
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	440b      	add	r3, r1
 8001a86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3b5      	bcc.n	8001a0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	687e      	ldr	r6, [r7, #4]
 8001aa6:	466d      	mov	r5, sp
 8001aa8:	f106 0410 	add.w	r4, r6, #16
 8001aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001abc:	1d33      	adds	r3, r6, #4
 8001abe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac0:	6838      	ldr	r0, [r7, #0]
 8001ac2:	f002 fa47 	bl	8003f54 <USB_DevInit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e00d      	b.n	8001af4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 fb96 	bl	800521e <USB_DevDisconnect>

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001afc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_PCD_Start+0x1c>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e020      	b.n	8001b5a <HAL_PCD_Start+0x5e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d109      	bne.n	8001b3c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d005      	beq.n	8001b3c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 f999 	bl	8003e78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fb46 	bl	80051dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b62:	b590      	push	{r4, r7, lr}
 8001b64:	b08d      	sub	sp, #52	; 0x34
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fc04 	bl	8005386 <USB_GetMode>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 848a 	bne.w	800249a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 fb68 	bl	8005260 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8480 	beq.w	8002498 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fb55 	bl	8005260 <USB_ReadInterrupts>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d107      	bne.n	8001bd0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f002 0202 	and.w	r2, r2, #2
 8001bce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f003 fb43 	bl	8005260 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f003 0310 	and.w	r3, r3, #16
 8001be0:	2b10      	cmp	r3, #16
 8001be2:	d161      	bne.n	8001ca8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0210 	bic.w	r2, r2, #16
 8001bf2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	3304      	adds	r3, #4
 8001c12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	0c5b      	lsrs	r3, r3, #17
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d124      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d035      	beq.n	8001c98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6a38      	ldr	r0, [r7, #32]
 8001c40:	f003 f97a 	bl	8004f38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	691a      	ldr	r2, [r3, #16]
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c50:	441a      	add	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c62:	441a      	add	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	621a      	str	r2, [r3, #32]
 8001c68:	e016      	b.n	8001c98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	0c5b      	lsrs	r3, r3, #17
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d110      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6a38      	ldr	r0, [r7, #32]
 8001c82:	f003 f959 	bl	8004f38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c92:	441a      	add	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0210 	orr.w	r2, r2, #16
 8001ca6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fad7 	bl	8005260 <USB_ReadInterrupts>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cbc:	f040 80a7 	bne.w	8001e0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fadc 	bl	8005286 <USB_ReadDevAllOutEpInterrupt>
 8001cce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001cd0:	e099      	b.n	8001e06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 808e 	beq.w	8001dfa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fb00 	bl	80052ee <USB_ReadDevOutEPInterrupt>
 8001cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d06:	461a      	mov	r2, r3
 8001d08:	2301      	movs	r3, #1
 8001d0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fec2 	bl	8002a98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 ff98 	bl	8002c68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d008      	beq.n	8001d54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	015a      	lsls	r2, r3, #5
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2310      	movs	r3, #16
 8001d52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d030      	beq.n	8001dc0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d109      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	69fa      	ldr	r2, [r7, #28]
 8001d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	78db      	ldrb	r3, [r3, #3]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f005 fe91 	bl	8007ad0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d008      	beq.n	8001ddc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2320      	movs	r3, #32
 8001dda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	015a      	lsls	r2, r3, #5
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	4413      	add	r3, r2
 8001dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df2:	461a      	mov	r2, r3
 8001df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f47f af62 	bne.w	8001cd2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fa24 	bl	8005260 <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e22:	f040 80db 	bne.w	8001fdc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fa45 	bl	80052ba <USB_ReadDevAllInEpInterrupt>
 8001e30:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e36:	e0cd      	b.n	8001fd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 80c2 	beq.w	8001fc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 fa6b 	bl	800532a <USB_ReadDevInEPInterrupt>
 8001e54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d057      	beq.n	8001f10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	2201      	movs	r2, #1
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69f9      	ldr	r1, [r7, #28]
 8001e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e80:	4013      	ands	r3, r2
 8001e82:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e90:	461a      	mov	r2, r3
 8001e92:	2301      	movs	r3, #1
 8001e94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d132      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	334c      	adds	r3, #76	; 0x4c
 8001eae:	6819      	ldr	r1, [r3, #0]
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4403      	add	r3, r0
 8001ebe:	3348      	adds	r3, #72	; 0x48
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4419      	add	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4403      	add	r3, r0
 8001ed2:	334c      	adds	r3, #76	; 0x4c
 8001ed4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d113      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x3a2>
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	3354      	adds	r3, #84	; 0x54
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001efc:	461a      	mov	r2, r3
 8001efe:	2101      	movs	r1, #1
 8001f00:	f003 fa72 	bl	80053e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f005 fd5b 	bl	80079c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f26:	461a      	mov	r2, r3
 8001f28:	2308      	movs	r3, #8
 8001f2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f42:	461a      	mov	r2, r3
 8001f44:	2310      	movs	r3, #16
 8001f46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2340      	movs	r3, #64	; 0x40
 8001f62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d023      	beq.n	8001fb6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f70:	6a38      	ldr	r0, [r7, #32]
 8001f72:	f002 f953 	bl	800421c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3338      	adds	r3, #56	; 0x38
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	3304      	adds	r3, #4
 8001f88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	78db      	ldrb	r3, [r3, #3]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d108      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f005 fda8 	bl	8007af4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	015a      	lsls	r2, r3, #5
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fcdb 	bl	800297e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	3301      	adds	r3, #1
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f47f af2e 	bne.w	8001e38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f93d 	bl	8005260 <USB_ReadInterrupts>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ff0:	d122      	bne.n	8002038 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002000:	f023 0301 	bic.w	r3, r3, #1
 8002004:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800200c:	2b01      	cmp	r3, #1
 800200e:	d108      	bne.n	8002022 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002018:	2100      	movs	r1, #0
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fec2 	bl	8002da4 <HAL_PCDEx_LPM_Callback>
 8002020:	e002      	b.n	8002028 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f005 fd46 	bl	8007ab4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 f90f 	bl	8005260 <USB_ReadInterrupts>
 8002042:	4603      	mov	r3, r0
 8002044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800204c:	d112      	bne.n	8002074 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d102      	bne.n	8002064 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f005 fd02 	bl	8007a68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002072:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f003 f8f1 	bl	8005260 <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002088:	f040 80b7 	bne.w	80021fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2110      	movs	r1, #16
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 f8b8 	bl	800421c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020b0:	e046      	b.n	8002140 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020be:	461a      	mov	r2, r3
 80020c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	015a      	lsls	r2, r3, #5
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d6:	0151      	lsls	r1, r2, #5
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	440a      	add	r2, r1
 80020dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	015a      	lsls	r2, r3, #5
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4413      	add	r3, r2
 80020ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f2:	461a      	mov	r2, r3
 80020f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fc:	015a      	lsls	r2, r3, #5
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	4413      	add	r3, r2
 8002102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210a:	0151      	lsls	r1, r2, #5
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	440a      	add	r2, r1
 8002110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002114:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002118:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	015a      	lsls	r2, r3, #5
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212a:	0151      	lsls	r1, r2, #5
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	440a      	add	r2, r1
 8002130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002134:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002138:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	3301      	adds	r3, #1
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002146:	429a      	cmp	r2, r3
 8002148:	d3b3      	bcc.n	80020b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002158:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800215c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002176:	f043 030b 	orr.w	r3, r3, #11
 800217a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218c:	f043 030b 	orr.w	r3, r3, #11
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	e015      	b.n	80021c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ba:	f043 030b 	orr.w	r3, r3, #11
 80021be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021e4:	461a      	mov	r2, r3
 80021e6:	f003 f8ff 	bl	80053e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695a      	ldr	r2, [r3, #20]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f82e 	bl	8005260 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800220a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220e:	d124      	bne.n	800225a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f003 f8c4 	bl	80053a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f002 f879 	bl	8004316 <USB_GetDevSpeed>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681c      	ldr	r4, [r3, #0]
 8002230:	f001 fa28 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 8002234:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	4620      	mov	r0, r4
 8002240:	f001 fd78 	bl	8003d34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f005 fbe6 	bl	8007a16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002258:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 fffe 	bl	8005260 <USB_ReadInterrupts>
 8002264:	4603      	mov	r3, r0
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b08      	cmp	r3, #8
 800226c:	d10a      	bne.n	8002284 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f005 fbc3 	bl	80079fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f002 0208 	and.w	r2, r2, #8
 8002282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 ffe9 	bl	8005260 <USB_ReadInterrupts>
 800228e:	4603      	mov	r3, r0
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d122      	bne.n	80022de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e014      	b.n	80022d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d105      	bne.n	80022ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb27 	bl	800291c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3301      	adds	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3e5      	bcc.n	80022aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 ffbc 	bl	8005260 <USB_ReadInterrupts>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022f2:	d13b      	bne.n	800236c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022f4:	2301      	movs	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	e02b      	b.n	8002352 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	4413      	add	r3, r2
 8002302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	3340      	adds	r3, #64	; 0x40
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d115      	bne.n	800234c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002320:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	da12      	bge.n	800234c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	333f      	adds	r3, #63	; 0x3f
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002342:	b2db      	uxtb	r3, r3
 8002344:	4619      	mov	r1, r3
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fae8 	bl	800291c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3301      	adds	r3, #1
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	429a      	cmp	r2, r3
 800235a:	d3ce      	bcc.n	80022fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800236a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f002 ff75 	bl	8005260 <USB_ReadInterrupts>
 8002376:	4603      	mov	r3, r0
 8002378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800237c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002380:	d155      	bne.n	800242e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002382:	2301      	movs	r3, #1
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
 8002386:	e045      	b.n	8002414 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d12e      	bne.n	800240e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da2b      	bge.n	800240e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80023c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d121      	bne.n	800240e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240a:	6053      	str	r3, [r2, #4]
            break;
 800240c:	e007      	b.n	800241e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b4      	bcc.n	8002388 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 ff14 	bl	8005260 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800243e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002442:	d10a      	bne.n	800245a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f005 fb67 	bl	8007b18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 fefe 	bl	8005260 <USB_ReadInterrupts>
 8002464:	4603      	mov	r3, r0
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b04      	cmp	r3, #4
 800246c:	d115      	bne.n	800249a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f005 fb57 	bl	8007b34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	e000      	b.n	800249a <HAL_PCD_IRQHandler+0x938>
      return;
 8002498:	bf00      	nop
    }
  }
}
 800249a:	3734      	adds	r7, #52	; 0x34
 800249c:	46bd      	mov	sp, r7
 800249e:	bd90      	pop	{r4, r7, pc}

080024a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_PCD_SetAddress+0x1a>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e013      	b.n	80024e2 <HAL_PCD_SetAddress+0x42>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	4611      	mov	r1, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fe5c 	bl	8005190 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	4608      	mov	r0, r1
 80024f4:	4611      	mov	r1, r2
 80024f6:	461a      	mov	r2, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	70fb      	strb	r3, [r7, #3]
 80024fc:	460b      	mov	r3, r1
 80024fe:	803b      	strh	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800250c:	2b00      	cmp	r3, #0
 800250e:	da0f      	bge.n	8002530 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	f003 020f 	and.w	r2, r3, #15
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	3338      	adds	r3, #56	; 0x38
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	3304      	adds	r3, #4
 8002526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	705a      	strb	r2, [r3, #1]
 800252e:	e00f      	b.n	8002550 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 020f 	and.w	r2, r3, #15
 8002536:	4613      	mov	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	3304      	adds	r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800255c:	883a      	ldrh	r2, [r7, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	78ba      	ldrb	r2, [r7, #2]
 8002566:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800257a:	78bb      	ldrb	r3, [r7, #2]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d102      	bne.n	8002586 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_PCD_EP_Open+0xaa>
 8002590:	2302      	movs	r3, #2
 8002592:	e00e      	b.n	80025b2 <HAL_PCD_EP_Open+0xc8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68f9      	ldr	r1, [r7, #12]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 fedc 	bl	8004360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80025b0:	7afb      	ldrb	r3, [r7, #11]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	da0f      	bge.n	80025ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	3338      	adds	r3, #56	; 0x38
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	705a      	strb	r2, [r3, #1]
 80025ec:	e00f      	b.n	800260e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	f003 020f 	and.w	r2, r3, #15
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	b2da      	uxtb	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_PCD_EP_Close+0x6e>
 8002624:	2302      	movs	r3, #2
 8002626:	e00e      	b.n	8002646 <HAL_PCD_EP_Close+0x8c>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68f9      	ldr	r1, [r7, #12]
 8002636:	4618      	mov	r0, r3
 8002638:	f001 ff1a 	bl	8004470 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	460b      	mov	r3, r1
 800265c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800265e:	7afb      	ldrb	r3, [r7, #11]
 8002660:	f003 020f 	and.w	r2, r3, #15
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2200      	movs	r2, #0
 8002688:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002690:	7afb      	ldrb	r3, [r7, #11]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	b2da      	uxtb	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026aa:	7afb      	ldrb	r3, [r7, #11]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	6979      	ldr	r1, [r7, #20]
 80026c2:	f002 f9f9 	bl	8004ab8 <USB_EP0StartXfer>
 80026c6:	e008      	b.n	80026da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	f001 ffa7 	bl	8004628 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	460b      	mov	r3, r1
 8002722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	7afb      	ldrb	r3, [r7, #11]
 8002726:	f003 020f 	and.w	r2, r3, #15
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	3304      	adds	r3, #4
 800273a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2200      	movs	r2, #0
 800274c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2201      	movs	r2, #1
 8002752:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002754:	7afb      	ldrb	r3, [r7, #11]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	b2da      	uxtb	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d102      	bne.n	800276e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	6979      	ldr	r1, [r7, #20]
 8002786:	f002 f997 	bl	8004ab8 <USB_EP0StartXfer>
 800278a:	e008      	b.n	800279e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	6979      	ldr	r1, [r7, #20]
 800279a:	f001 ff45 	bl	8004628 <USB_EPStartXfer>
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d901      	bls.n	80027c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e050      	b.n	8002868 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	da0f      	bge.n	80027ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ce:	78fb      	ldrb	r3, [r7, #3]
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	3338      	adds	r3, #56	; 0x38
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	705a      	strb	r2, [r3, #1]
 80027ec:	e00d      	b.n	800280a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027ee:	78fa      	ldrb	r2, [r7, #3]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	b2da      	uxtb	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002822:	2b01      	cmp	r3, #1
 8002824:	d101      	bne.n	800282a <HAL_PCD_EP_SetStall+0x82>
 8002826:	2302      	movs	r3, #2
 8002828:	e01e      	b.n	8002868 <HAL_PCD_EP_SetStall+0xc0>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f002 fbd5 	bl	8004fe8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	b2d9      	uxtb	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002858:	461a      	mov	r2, r3
 800285a:	f002 fdc5 	bl	80053e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 020f 	and.w	r2, r3, #15
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	d901      	bls.n	800288e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e042      	b.n	8002914 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800288e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002892:	2b00      	cmp	r3, #0
 8002894:	da0f      	bge.n	80028b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	f003 020f 	and.w	r2, r3, #15
 800289c:	4613      	mov	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	3338      	adds	r3, #56	; 0x38
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	3304      	adds	r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	705a      	strb	r2, [r3, #1]
 80028b4:	e00f      	b.n	80028d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 020f 	and.w	r2, r3, #15
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	4413      	add	r3, r2
 80028cc:	3304      	adds	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_PCD_EP_ClrStall+0x86>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e00e      	b.n	8002914 <HAL_PCD_EP_ClrStall+0xa4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68f9      	ldr	r1, [r7, #12]
 8002904:	4618      	mov	r0, r3
 8002906:	f002 fbdd 	bl	80050c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800292c:	2b00      	cmp	r3, #0
 800292e:	da0c      	bge.n	800294a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	3338      	adds	r3, #56	; 0x38
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e00c      	b.n	8002964 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	3304      	adds	r3, #4
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 f9fc 	bl	8004d68 <USB_EPStopXfer>
 8002970:	4603      	mov	r3, r0
 8002972:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002974:	7afb      	ldrb	r3, [r7, #11]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b08a      	sub	sp, #40	; 0x28
 8002982:	af02      	add	r7, sp, #8
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d901      	bls.n	80029b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06c      	b.n	8002a90 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d902      	bls.n	80029d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3303      	adds	r3, #3
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029da:	e02b      	b.n	8002a34 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	699a      	ldr	r2, [r3, #24]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d902      	bls.n	80029f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3303      	adds	r3, #3
 80029fc:	089b      	lsrs	r3, r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6919      	ldr	r1, [r3, #16]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4603      	mov	r3, r0
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f002 fa50 	bl	8004ebc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	441a      	add	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	441a      	add	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d809      	bhi.n	8002a5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d203      	bcs.n	8002a5e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1be      	bne.n	80029dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d811      	bhi.n	8002a8e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	2201      	movs	r2, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	333c      	adds	r3, #60	; 0x3c
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d17b      	bne.n	8002bc6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	f240 80b9 	bls.w	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80b3 	beq.w	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afa:	461a      	mov	r2, r3
 8002afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b00:	6093      	str	r3, [r2, #8]
 8002b02:	e0a7      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	6093      	str	r3, [r2, #8]
 8002b20:	e098      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8093 	bne.w	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d90f      	bls.n	8002b56 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	6093      	str	r3, [r2, #8]
 8002b54:	e07e      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	69da      	ldr	r2, [r3, #28]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b82:	1ad2      	subs	r2, r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d114      	bne.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	f002 fc20 	bl	80053e8 <USB_EP0_OutStart>
 8002ba8:	e006      	b.n	8002bb8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	441a      	add	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f004 fee6 	bl	8007990 <HAL_PCD_DataOutStageCallback>
 8002bc4:	e046      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	4a26      	ldr	r2, [pc, #152]	; (8002c64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d124      	bne.n	8002c18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be4:	461a      	mov	r2, r3
 8002be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bea:	6093      	str	r3, [r2, #8]
 8002bec:	e032      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c04:	461a      	mov	r2, r3
 8002c06:	2320      	movs	r3, #32
 8002c08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f004 febd 	bl	8007990 <HAL_PCD_DataOutStageCallback>
 8002c16:	e01d      	b.n	8002c54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d114      	bne.n	8002c48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d108      	bne.n	8002c48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c40:	461a      	mov	r2, r3
 8002c42:	2100      	movs	r1, #0
 8002c44:	f002 fbd0 	bl	80053e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f004 fe9e 	bl	8007990 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	4f54300a 	.word	0x4f54300a
 8002c64:	4f54310a 	.word	0x4f54310a

08002c68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	333c      	adds	r3, #60	; 0x3c
 8002c80:	3304      	adds	r3, #4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d90e      	bls.n	8002cbc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f004 fe55 	bl	800796c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d90c      	bls.n	8002ce4 <PCD_EP_OutSetupPacket_int+0x7c>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2101      	movs	r1, #1
 8002ce0:	f002 fb82 	bl	80053e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	4f54300a 	.word	0x4f54300a

08002cf4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
 8002d00:	4613      	mov	r3, r2
 8002d02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d107      	bne.n	8002d22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d12:	883b      	ldrh	r3, [r7, #0]
 8002d14:	0419      	lsls	r1, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d20:	e028      	b.n	8002d74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	e00d      	b.n	8002d52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3340      	adds	r3, #64	; 0x40
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	4413      	add	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3ec      	bcc.n	8002d36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d5c:	883b      	ldrh	r3, [r7, #0]
 8002d5e:	0418      	lsls	r0, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	4302      	orrs	r2, r0
 8002d6c:	3340      	adds	r3, #64	; 0x40
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e267      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d075      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d00c      	beq.n	8002e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d112      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002df2:	4b82      	ldr	r3, [pc, #520]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d05b      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x108>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d157      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e242      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d106      	bne.n	8002e30 <HAL_RCC_OscConfig+0x74>
 8002e22:	4b76      	ldr	r3, [pc, #472]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a75      	ldr	r2, [pc, #468]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	e01d      	b.n	8002e6c <HAL_RCC_OscConfig+0xb0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x98>
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6f      	ldr	r2, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6c      	ldr	r2, [pc, #432]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e00b      	b.n	8002e6c <HAL_RCC_OscConfig+0xb0>
 8002e54:	4b69      	ldr	r3, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a68      	ldr	r2, [pc, #416]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b66      	ldr	r3, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a65      	ldr	r2, [pc, #404]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d013      	beq.n	8002e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e74:	f7fd ff0a 	bl	8000c8c <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e7c:	f7fd ff06 	bl	8000c8c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e207      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0xc0>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9c:	f7fd fef6 	bl	8000c8c <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea4:	f7fd fef2 	bl	8000c8c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b64      	cmp	r3, #100	; 0x64
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e1f3      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	4b51      	ldr	r3, [pc, #324]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1f0      	bne.n	8002ea4 <HAL_RCC_OscConfig+0xe8>
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d063      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed2:	4b4a      	ldr	r3, [pc, #296]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d11c      	bne.n	8002f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef6:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <HAL_RCC_OscConfig+0x152>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e1c7      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0e:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4937      	ldr	r1, [pc, #220]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f22:	e03a      	b.n	8002f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2c:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCC_OscConfig+0x244>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fd feab 	bl	8000c8c <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7fd fea7 	bl	8000c8c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e1a8      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4925      	ldr	r1, [pc, #148]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
 8002f6c:	e015      	b.n	8002f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCC_OscConfig+0x244>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fd fe8a 	bl	8000c8c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fd fe86 	bl	8000c8c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e187      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d036      	beq.n	8003014 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_RCC_OscConfig+0x248>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd fe6a 	bl	8000c8c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fd fe66 	bl	8000c8c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e167      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x200>
 8002fda:	e01b      	b.n	8003014 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b09      	ldr	r3, [pc, #36]	; (8003004 <HAL_RCC_OscConfig+0x248>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fd fe53 	bl	8000c8c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe8:	e00e      	b.n	8003008 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fd fe4f 	bl	8000c8c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d907      	bls.n	8003008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e150      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
 8002ffc:	40023800 	.word	0x40023800
 8003000:	42470000 	.word	0x42470000
 8003004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ea      	bne.n	8002fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8097 	beq.w	8003150 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003026:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10f      	bne.n	8003052 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]
 8003036:	4b7d      	ldr	r3, [pc, #500]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a7c      	ldr	r2, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b7a      	ldr	r3, [pc, #488]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	4b77      	ldr	r3, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305e:	4b74      	ldr	r3, [pc, #464]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a73      	ldr	r2, [pc, #460]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fd fe0f 	bl	8000c8c <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fd fe0b 	bl	8000c8c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e10c      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x474>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x2ea>
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a63      	ldr	r2, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	e01c      	b.n	80030e0 <HAL_RCC_OscConfig+0x324>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b05      	cmp	r3, #5
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x30c>
 80030ae:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5e      	ldr	r2, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b5c      	ldr	r3, [pc, #368]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a5b      	ldr	r2, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	e00b      	b.n	80030e0 <HAL_RCC_OscConfig+0x324>
 80030c8:	4b58      	ldr	r3, [pc, #352]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a57      	ldr	r2, [pc, #348]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
 80030d4:	4b55      	ldr	r3, [pc, #340]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a54      	ldr	r2, [pc, #336]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80030da:	f023 0304 	bic.w	r3, r3, #4
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d015      	beq.n	8003114 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e8:	f7fd fdd0 	bl	8000c8c <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	e00a      	b.n	8003106 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f0:	f7fd fdcc 	bl	8000c8c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fe:	4293      	cmp	r3, r2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e0cb      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003106:	4b49      	ldr	r3, [pc, #292]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0ee      	beq.n	80030f0 <HAL_RCC_OscConfig+0x334>
 8003112:	e014      	b.n	800313e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003114:	f7fd fdba 	bl	8000c8c <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fd fdb6 	bl	8000c8c <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e0b5      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003132:	4b3e      	ldr	r3, [pc, #248]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ee      	bne.n	800311c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	4a38      	ldr	r2, [pc, #224]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80a1 	beq.w	800329c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800315a:	4b34      	ldr	r3, [pc, #208]	; (800322c <HAL_RCC_OscConfig+0x470>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d05c      	beq.n	8003220 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d141      	bne.n	80031f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b31      	ldr	r3, [pc, #196]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fd fd8a 	bl	8000c8c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fd fd86 	bl	8000c8c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e087      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	019b      	lsls	r3, r3, #6
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	491b      	ldr	r1, [pc, #108]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c4:	4b1b      	ldr	r3, [pc, #108]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fd fd5f 	bl	8000c8c <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd fd5b 	bl	8000c8c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e05c      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	4b11      	ldr	r3, [pc, #68]	; (800322c <HAL_RCC_OscConfig+0x470>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCC_OscConfig+0x416>
 80031f0:	e054      	b.n	800329c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f2:	4b10      	ldr	r3, [pc, #64]	; (8003234 <HAL_RCC_OscConfig+0x478>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fd fd48 	bl	8000c8c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003200:	f7fd fd44 	bl	8000c8c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e045      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x470>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x444>
 800321e:	e03d      	b.n	800329c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e038      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000
 8003234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x4ec>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d028      	beq.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d121      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d11a      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003270:	4293      	cmp	r3, r2
 8003272:	d111      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	3b01      	subs	r3, #1
 8003282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e0cc      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d90c      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b65      	ldr	r3, [pc, #404]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d6:	4b63      	ldr	r3, [pc, #396]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d001      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d020      	beq.n	8003336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800330a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003318:	4b53      	ldr	r3, [pc, #332]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a52      	ldr	r2, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	494d      	ldr	r1, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d044      	beq.n	80033cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	4b47      	ldr	r3, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d119      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e07f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d003      	beq.n	800336a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003366:	2b03      	cmp	r3, #3
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e06f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337a:	4b3b      	ldr	r3, [pc, #236]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e067      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800338a:	4b37      	ldr	r3, [pc, #220]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 0203 	bic.w	r2, r3, #3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4934      	ldr	r1, [pc, #208]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800339c:	f7fd fc76 	bl	8000c8c <HAL_GetTick>
 80033a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a4:	f7fd fc72 	bl	8000c8c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e04f      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ba:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 020c 	and.w	r2, r3, #12
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d1eb      	bne.n	80033a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 030f 	and.w	r3, r3, #15
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d20c      	bcs.n	80033f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e032      	b.n	800345a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4916      	ldr	r1, [pc, #88]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d009      	beq.n	8003432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003432:	f000 f821 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8003436:	4602      	mov	r2, r0
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	490a      	ldr	r1, [pc, #40]	; (800346c <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	5ccb      	ldrb	r3, [r1, r3]
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344e:	4b09      	ldr	r3, [pc, #36]	; (8003474 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fbd6 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00
 8003468:	40023800 	.word	0x40023800
 800346c:	08007fb4 	.word	0x08007fb4
 8003470:	20000000 	.word	0x20000000
 8003474:	20000004 	.word	0x20000004

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b094      	sub	sp, #80	; 0x50
 800347e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	647b      	str	r3, [r7, #68]	; 0x44
 8003484:	2300      	movs	r3, #0
 8003486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003488:	2300      	movs	r3, #0
 800348a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003490:	4b79      	ldr	r3, [pc, #484]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d00d      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x40>
 800349c:	2b08      	cmp	r3, #8
 800349e:	f200 80e1 	bhi.w	8003664 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x34>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034aa:	e0db      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_GetSysClockFreq+0x204>)
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034b0:	e0db      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b2:	4b73      	ldr	r3, [pc, #460]	; (8003680 <HAL_RCC_GetSysClockFreq+0x208>)
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b6:	e0d8      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b8:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c2:	4b6d      	ldr	r3, [pc, #436]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d063      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ce:	4b6a      	ldr	r3, [pc, #424]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	099b      	lsrs	r3, r3, #6
 80034d4:	2200      	movs	r2, #0
 80034d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e0:	633b      	str	r3, [r7, #48]	; 0x30
 80034e2:	2300      	movs	r3, #0
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ea:	4622      	mov	r2, r4
 80034ec:	462b      	mov	r3, r5
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4621      	mov	r1, r4
 8003504:	1a51      	subs	r1, r2, r1
 8003506:	6139      	str	r1, [r7, #16]
 8003508:	4629      	mov	r1, r5
 800350a:	eb63 0301 	sbc.w	r3, r3, r1
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800351c:	4659      	mov	r1, fp
 800351e:	018b      	lsls	r3, r1, #6
 8003520:	4651      	mov	r1, sl
 8003522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003526:	4651      	mov	r1, sl
 8003528:	018a      	lsls	r2, r1, #6
 800352a:	4651      	mov	r1, sl
 800352c:	ebb2 0801 	subs.w	r8, r2, r1
 8003530:	4659      	mov	r1, fp
 8003532:	eb63 0901 	sbc.w	r9, r3, r1
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800354a:	4690      	mov	r8, r2
 800354c:	4699      	mov	r9, r3
 800354e:	4623      	mov	r3, r4
 8003550:	eb18 0303 	adds.w	r3, r8, r3
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	462b      	mov	r3, r5
 8003558:	eb49 0303 	adc.w	r3, r9, r3
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800356a:	4629      	mov	r1, r5
 800356c:	024b      	lsls	r3, r1, #9
 800356e:	4621      	mov	r1, r4
 8003570:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003574:	4621      	mov	r1, r4
 8003576:	024a      	lsls	r2, r1, #9
 8003578:	4610      	mov	r0, r2
 800357a:	4619      	mov	r1, r3
 800357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357e:	2200      	movs	r2, #0
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
 8003582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003588:	f7fc fe38 	bl	80001fc <__aeabi_uldivmod>
 800358c:	4602      	mov	r2, r0
 800358e:	460b      	mov	r3, r1
 8003590:	4613      	mov	r3, r2
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	e058      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003596:	4b38      	ldr	r3, [pc, #224]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	099b      	lsrs	r3, r3, #6
 800359c:	2200      	movs	r2, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	4611      	mov	r1, r2
 80035a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035a6:	623b      	str	r3, [r7, #32]
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
 80035ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035b0:	4642      	mov	r2, r8
 80035b2:	464b      	mov	r3, r9
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f04f 0100 	mov.w	r1, #0
 80035bc:	0159      	lsls	r1, r3, #5
 80035be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035c2:	0150      	lsls	r0, r2, #5
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4641      	mov	r1, r8
 80035ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e8:	ebb2 040a 	subs.w	r4, r2, sl
 80035ec:	eb63 050b 	sbc.w	r5, r3, fp
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	00eb      	lsls	r3, r5, #3
 80035fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fe:	00e2      	lsls	r2, r4, #3
 8003600:	4614      	mov	r4, r2
 8003602:	461d      	mov	r5, r3
 8003604:	4643      	mov	r3, r8
 8003606:	18e3      	adds	r3, r4, r3
 8003608:	603b      	str	r3, [r7, #0]
 800360a:	464b      	mov	r3, r9
 800360c:	eb45 0303 	adc.w	r3, r5, r3
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361e:	4629      	mov	r1, r5
 8003620:	028b      	lsls	r3, r1, #10
 8003622:	4621      	mov	r1, r4
 8003624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003628:	4621      	mov	r1, r4
 800362a:	028a      	lsls	r2, r1, #10
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	61fa      	str	r2, [r7, #28]
 8003638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800363c:	f7fc fdde 	bl	80001fc <__aeabi_uldivmod>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4613      	mov	r3, r2
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003648:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <HAL_RCC_GetSysClockFreq+0x200>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	3301      	adds	r3, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003662:	e002      	b.n	800366a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetSysClockFreq+0x204>)
 8003666:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800366c:	4618      	mov	r0, r3
 800366e:	3750      	adds	r7, #80	; 0x50
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800
 800367c:	00f42400 	.word	0x00f42400
 8003680:	007a1200 	.word	0x007a1200

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003688:	4b03      	ldr	r3, [pc, #12]	; (8003698 <HAL_RCC_GetHCLKFreq+0x14>)
 800368a:	681b      	ldr	r3, [r3, #0]
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000000 	.word	0x20000000

0800369c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036a0:	f7ff fff0 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036a4:	4602      	mov	r2, r0
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	0a9b      	lsrs	r3, r3, #10
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	4903      	ldr	r1, [pc, #12]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40023800 	.word	0x40023800
 80036c0:	08007fc4 	.word	0x08007fc4

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c8:	f7ff ffdc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036cc:	4602      	mov	r2, r0
 80036ce:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	0b5b      	lsrs	r3, r3, #13
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	4903      	ldr	r1, [pc, #12]	; (80036e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036da:	5ccb      	ldrb	r3, [r1, r3]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40023800 	.word	0x40023800
 80036e8:	08007fc4 	.word	0x08007fc4

080036ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e03f      	b.n	800377e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fd f99c 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800372e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f829 	bl	8003788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800378c:	b0c0      	sub	sp, #256	; 0x100
 800378e:	af00      	add	r7, sp, #0
 8003790:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a4:	68d9      	ldr	r1, [r3, #12]
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	ea40 0301 	orr.w	r3, r0, r1
 80037b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	431a      	orrs	r2, r3
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80037e0:	f021 010c 	bic.w	r1, r1, #12
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80037ee:	430b      	orrs	r3, r1
 80037f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003802:	6999      	ldr	r1, [r3, #24]
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	ea40 0301 	orr.w	r3, r0, r1
 800380e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b8f      	ldr	r3, [pc, #572]	; (8003a54 <UART_SetConfig+0x2cc>)
 8003818:	429a      	cmp	r2, r3
 800381a:	d005      	beq.n	8003828 <UART_SetConfig+0xa0>
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b8d      	ldr	r3, [pc, #564]	; (8003a58 <UART_SetConfig+0x2d0>)
 8003824:	429a      	cmp	r2, r3
 8003826:	d104      	bne.n	8003832 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003828:	f7ff ff4c 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 800382c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003830:	e003      	b.n	800383a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003832:	f7ff ff33 	bl	800369c <HAL_RCC_GetPCLK1Freq>
 8003836:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003844:	f040 810c 	bne.w	8003a60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384c:	2200      	movs	r2, #0
 800384e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003852:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003856:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800385a:	4622      	mov	r2, r4
 800385c:	462b      	mov	r3, r5
 800385e:	1891      	adds	r1, r2, r2
 8003860:	65b9      	str	r1, [r7, #88]	; 0x58
 8003862:	415b      	adcs	r3, r3
 8003864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003866:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800386a:	4621      	mov	r1, r4
 800386c:	eb12 0801 	adds.w	r8, r2, r1
 8003870:	4629      	mov	r1, r5
 8003872:	eb43 0901 	adc.w	r9, r3, r1
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800388a:	4690      	mov	r8, r2
 800388c:	4699      	mov	r9, r3
 800388e:	4623      	mov	r3, r4
 8003890:	eb18 0303 	adds.w	r3, r8, r3
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003898:	462b      	mov	r3, r5
 800389a:	eb49 0303 	adc.w	r3, r9, r3
 800389e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038b6:	460b      	mov	r3, r1
 80038b8:	18db      	adds	r3, r3, r3
 80038ba:	653b      	str	r3, [r7, #80]	; 0x50
 80038bc:	4613      	mov	r3, r2
 80038be:	eb42 0303 	adc.w	r3, r2, r3
 80038c2:	657b      	str	r3, [r7, #84]	; 0x54
 80038c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80038c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80038cc:	f7fc fc96 	bl	80001fc <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <UART_SetConfig+0x2d4>)
 80038d6:	fba3 2302 	umull	r2, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	011c      	lsls	r4, r3, #4
 80038de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80038ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	1891      	adds	r1, r2, r2
 80038f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80038f8:	415b      	adcs	r3, r3
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003900:	4641      	mov	r1, r8
 8003902:	eb12 0a01 	adds.w	sl, r2, r1
 8003906:	4649      	mov	r1, r9
 8003908:	eb43 0b01 	adc.w	fp, r3, r1
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003918:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800391c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003920:	4692      	mov	sl, r2
 8003922:	469b      	mov	fp, r3
 8003924:	4643      	mov	r3, r8
 8003926:	eb1a 0303 	adds.w	r3, sl, r3
 800392a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800392e:	464b      	mov	r3, r9
 8003930:	eb4b 0303 	adc.w	r3, fp, r3
 8003934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003944:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003948:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800394c:	460b      	mov	r3, r1
 800394e:	18db      	adds	r3, r3, r3
 8003950:	643b      	str	r3, [r7, #64]	; 0x40
 8003952:	4613      	mov	r3, r2
 8003954:	eb42 0303 	adc.w	r3, r2, r3
 8003958:	647b      	str	r3, [r7, #68]	; 0x44
 800395a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800395e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003962:	f7fc fc4b 	bl	80001fc <__aeabi_uldivmod>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4611      	mov	r1, r2
 800396c:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <UART_SetConfig+0x2d4>)
 800396e:	fba3 2301 	umull	r2, r3, r3, r1
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2264      	movs	r2, #100	; 0x64
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003982:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <UART_SetConfig+0x2d4>)
 8003984:	fba3 2302 	umull	r2, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003990:	441c      	add	r4, r3
 8003992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800399c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	1891      	adds	r1, r2, r2
 80039aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80039ac:	415b      	adcs	r3, r3
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039b4:	4641      	mov	r1, r8
 80039b6:	1851      	adds	r1, r2, r1
 80039b8:	6339      	str	r1, [r7, #48]	; 0x30
 80039ba:	4649      	mov	r1, r9
 80039bc:	414b      	adcs	r3, r1
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80039cc:	4659      	mov	r1, fp
 80039ce:	00cb      	lsls	r3, r1, #3
 80039d0:	4651      	mov	r1, sl
 80039d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039d6:	4651      	mov	r1, sl
 80039d8:	00ca      	lsls	r2, r1, #3
 80039da:	4610      	mov	r0, r2
 80039dc:	4619      	mov	r1, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	4642      	mov	r2, r8
 80039e2:	189b      	adds	r3, r3, r2
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039e8:	464b      	mov	r3, r9
 80039ea:	460a      	mov	r2, r1
 80039ec:	eb42 0303 	adc.w	r3, r2, r3
 80039f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a00:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a08:	460b      	mov	r3, r1
 8003a0a:	18db      	adds	r3, r3, r3
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0e:	4613      	mov	r3, r2
 8003a10:	eb42 0303 	adc.w	r3, r2, r3
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a1e:	f7fc fbed 	bl	80001fc <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <UART_SetConfig+0x2d4>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <UART_SetConfig+0x2d4>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4422      	add	r2, r4
 8003a4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a50:	e105      	b.n	8003c5e <UART_SetConfig+0x4d6>
 8003a52:	bf00      	nop
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003a6a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003a6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003a72:	4642      	mov	r2, r8
 8003a74:	464b      	mov	r3, r9
 8003a76:	1891      	adds	r1, r2, r2
 8003a78:	6239      	str	r1, [r7, #32]
 8003a7a:	415b      	adcs	r3, r3
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a82:	4641      	mov	r1, r8
 8003a84:	1854      	adds	r4, r2, r1
 8003a86:	4649      	mov	r1, r9
 8003a88:	eb43 0501 	adc.w	r5, r3, r1
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	00eb      	lsls	r3, r5, #3
 8003a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9a:	00e2      	lsls	r2, r4, #3
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	18e3      	adds	r3, r4, r3
 8003aa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	eb45 0303 	adc.w	r3, r5, r3
 8003aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003abe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ace:	4629      	mov	r1, r5
 8003ad0:	008b      	lsls	r3, r1, #2
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad8:	4621      	mov	r1, r4
 8003ada:	008a      	lsls	r2, r1, #2
 8003adc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ae0:	f7fc fb8c 	bl	80001fc <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4b60      	ldr	r3, [pc, #384]	; (8003c6c <UART_SetConfig+0x4e4>)
 8003aea:	fba3 2302 	umull	r2, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	011c      	lsls	r4, r3, #4
 8003af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003afc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b04:	4642      	mov	r2, r8
 8003b06:	464b      	mov	r3, r9
 8003b08:	1891      	adds	r1, r2, r2
 8003b0a:	61b9      	str	r1, [r7, #24]
 8003b0c:	415b      	adcs	r3, r3
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b14:	4641      	mov	r1, r8
 8003b16:	1851      	adds	r1, r2, r1
 8003b18:	6139      	str	r1, [r7, #16]
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	414b      	adcs	r3, r1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b2c:	4659      	mov	r1, fp
 8003b2e:	00cb      	lsls	r3, r1, #3
 8003b30:	4651      	mov	r1, sl
 8003b32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b36:	4651      	mov	r1, sl
 8003b38:	00ca      	lsls	r2, r1, #3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4642      	mov	r2, r8
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b48:	464b      	mov	r3, r9
 8003b4a:	460a      	mov	r2, r1
 8003b4c:	eb42 0303 	adc.w	r3, r2, r3
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b5e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003b6c:	4649      	mov	r1, r9
 8003b6e:	008b      	lsls	r3, r1, #2
 8003b70:	4641      	mov	r1, r8
 8003b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b76:	4641      	mov	r1, r8
 8003b78:	008a      	lsls	r2, r1, #2
 8003b7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003b7e:	f7fc fb3d 	bl	80001fc <__aeabi_uldivmod>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <UART_SetConfig+0x4e4>)
 8003b88:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8c:	095b      	lsrs	r3, r3, #5
 8003b8e:	2164      	movs	r1, #100	; 0x64
 8003b90:	fb01 f303 	mul.w	r3, r1, r3
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	3332      	adds	r3, #50	; 0x32
 8003b9a:	4a34      	ldr	r2, [pc, #208]	; (8003c6c <UART_SetConfig+0x4e4>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba6:	441c      	add	r4, r3
 8003ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bac:	2200      	movs	r2, #0
 8003bae:	673b      	str	r3, [r7, #112]	; 0x70
 8003bb0:	677a      	str	r2, [r7, #116]	; 0x74
 8003bb2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	464b      	mov	r3, r9
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1851      	adds	r1, r2, r1
 8003bca:	6039      	str	r1, [r7, #0]
 8003bcc:	4649      	mov	r1, r9
 8003bce:	414b      	adcs	r3, r1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bde:	4659      	mov	r1, fp
 8003be0:	00cb      	lsls	r3, r1, #3
 8003be2:	4651      	mov	r1, sl
 8003be4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be8:	4651      	mov	r1, sl
 8003bea:	00ca      	lsls	r2, r1, #3
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	189b      	adds	r3, r3, r2
 8003bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c0c:	667a      	str	r2, [r7, #100]	; 0x64
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c1a:	4649      	mov	r1, r9
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	4641      	mov	r1, r8
 8003c20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c24:	4641      	mov	r1, r8
 8003c26:	008a      	lsls	r2, r1, #2
 8003c28:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c2c:	f7fc fae6 	bl	80001fc <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <UART_SetConfig+0x4e4>)
 8003c36:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	2164      	movs	r1, #100	; 0x64
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	3332      	adds	r3, #50	; 0x32
 8003c48:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <UART_SetConfig+0x4e4>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	f003 020f 	and.w	r2, r3, #15
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4422      	add	r2, r4
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	bf00      	nop
 8003c60:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6a:	bf00      	nop
 8003c6c:	51eb851f 	.word	0x51eb851f

08003c70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c70:	b084      	sub	sp, #16
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	f107 001c 	add.w	r0, r7, #28
 8003c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d122      	bne.n	8003cce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d105      	bne.n	8003cc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f001 fbee 	bl	80054a4 <USB_CoreReset>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e01a      	b.n	8003d04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f001 fbe2 	bl	80054a4 <USB_CoreReset>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf6:	e005      	b.n	8003d04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d10b      	bne.n	8003d22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f043 0206 	orr.w	r2, r3, #6
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2e:	b004      	add	sp, #16
 8003d30:	4770      	bx	lr
	...

08003d34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d165      	bne.n	8003e14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a41      	ldr	r2, [pc, #260]	; (8003e50 <USB_SetTurnaroundTime+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d906      	bls.n	8003d5e <USB_SetTurnaroundTime+0x2a>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4a40      	ldr	r2, [pc, #256]	; (8003e54 <USB_SetTurnaroundTime+0x120>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d202      	bcs.n	8003d5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d58:	230f      	movs	r3, #15
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e062      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a3c      	ldr	r2, [pc, #240]	; (8003e54 <USB_SetTurnaroundTime+0x120>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d306      	bcc.n	8003d74 <USB_SetTurnaroundTime+0x40>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4a3b      	ldr	r2, [pc, #236]	; (8003e58 <USB_SetTurnaroundTime+0x124>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d202      	bcs.n	8003d74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d6e:	230e      	movs	r3, #14
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e057      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <USB_SetTurnaroundTime+0x124>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d306      	bcc.n	8003d8a <USB_SetTurnaroundTime+0x56>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <USB_SetTurnaroundTime+0x128>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d202      	bcs.n	8003d8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d84:	230d      	movs	r3, #13
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e04c      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4a33      	ldr	r2, [pc, #204]	; (8003e5c <USB_SetTurnaroundTime+0x128>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d306      	bcc.n	8003da0 <USB_SetTurnaroundTime+0x6c>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <USB_SetTurnaroundTime+0x12c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d802      	bhi.n	8003da0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d9a:	230c      	movs	r3, #12
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e041      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	4a2f      	ldr	r2, [pc, #188]	; (8003e60 <USB_SetTurnaroundTime+0x12c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d906      	bls.n	8003db6 <USB_SetTurnaroundTime+0x82>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a2e      	ldr	r2, [pc, #184]	; (8003e64 <USB_SetTurnaroundTime+0x130>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d802      	bhi.n	8003db6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003db0:	230b      	movs	r3, #11
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e036      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <USB_SetTurnaroundTime+0x130>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d906      	bls.n	8003dcc <USB_SetTurnaroundTime+0x98>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <USB_SetTurnaroundTime+0x134>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	e02b      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4a26      	ldr	r2, [pc, #152]	; (8003e68 <USB_SetTurnaroundTime+0x134>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d906      	bls.n	8003de2 <USB_SetTurnaroundTime+0xae>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <USB_SetTurnaroundTime+0x138>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d202      	bcs.n	8003de2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ddc:	2309      	movs	r3, #9
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e020      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <USB_SetTurnaroundTime+0x138>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d306      	bcc.n	8003df8 <USB_SetTurnaroundTime+0xc4>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <USB_SetTurnaroundTime+0x13c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d802      	bhi.n	8003df8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003df2:	2308      	movs	r3, #8
 8003df4:	617b      	str	r3, [r7, #20]
 8003df6:	e015      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <USB_SetTurnaroundTime+0x13c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d906      	bls.n	8003e0e <USB_SetTurnaroundTime+0xda>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <USB_SetTurnaroundTime+0x140>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d202      	bcs.n	8003e0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003e08:	2307      	movs	r3, #7
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	e00a      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003e0e:	2306      	movs	r3, #6
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	e007      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d102      	bne.n	8003e20 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003e1a:	2309      	movs	r3, #9
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	e001      	b.n	8003e24 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003e20:	2309      	movs	r3, #9
 8003e22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	00d8acbf 	.word	0x00d8acbf
 8003e54:	00e4e1c0 	.word	0x00e4e1c0
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	01067380 	.word	0x01067380
 8003e60:	011a499f 	.word	0x011a499f
 8003e64:	01312cff 	.word	0x01312cff
 8003e68:	014ca43f 	.word	0x014ca43f
 8003e6c:	016e3600 	.word	0x016e3600
 8003e70:	01a6ab1f 	.word	0x01a6ab1f
 8003e74:	01e84800 	.word	0x01e84800

08003e78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f023 0201 	bic.w	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7fc feda 	bl	8000ca4 <HAL_Delay>
      ms++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f001 fa45 	bl	8005386 <USB_GetMode>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d01e      	beq.n	8003f40 <USB_SetCurrentMode+0x84>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b31      	cmp	r3, #49	; 0x31
 8003f06:	d9f0      	bls.n	8003eea <USB_SetCurrentMode+0x2e>
 8003f08:	e01a      	b.n	8003f40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d115      	bne.n	8003f3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7fc fec1 	bl	8000ca4 <HAL_Delay>
      ms++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3301      	adds	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f001 fa2c 	bl	8005386 <USB_GetMode>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <USB_SetCurrentMode+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2b31      	cmp	r3, #49	; 0x31
 8003f38:	d9f0      	bls.n	8003f1c <USB_SetCurrentMode+0x60>
 8003f3a:	e001      	b.n	8003f40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e005      	b.n	8003f4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b32      	cmp	r3, #50	; 0x32
 8003f44:	d101      	bne.n	8003f4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f54:	b084      	sub	sp, #16
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	e009      	b.n	8003f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	3340      	adds	r3, #64	; 0x40
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0e      	cmp	r3, #14
 8003f8c:	d9f2      	bls.n	8003f74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11c      	bne.n	8003fce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa2:	f043 0302 	orr.w	r3, r3, #2
 8003fa6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
 8003fcc:	e00b      	b.n	8003fe6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	461a      	mov	r2, r3
 8004002:	680b      	ldr	r3, [r1, #0]
 8004004:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	2b01      	cmp	r3, #1
 800400a:	d10c      	bne.n	8004026 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004012:	2100      	movs	r1, #0
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f965 	bl	80042e4 <USB_SetDevSpeed>
 800401a:	e008      	b.n	800402e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800401c:	2101      	movs	r1, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f960 	bl	80042e4 <USB_SetDevSpeed>
 8004024:	e003      	b.n	800402e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004026:	2103      	movs	r1, #3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f95b 	bl	80042e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800402e:	2110      	movs	r1, #16
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8f3 	bl	800421c <USB_FlushTxFifo>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f91f 	bl	8004284 <USB_FlushRxFifo>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004062:	461a      	mov	r2, r3
 8004064:	2300      	movs	r3, #0
 8004066:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e043      	b.n	8004102 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800408c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004090:	d118      	bne.n	80040c4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e013      	b.n	80040d6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	461a      	mov	r2, r3
 80040f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	429a      	cmp	r2, r3
 8004108:	d3b7      	bcc.n	800407a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e043      	b.n	8004198 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004126:	d118      	bne.n	800415a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	461a      	mov	r2, r3
 800413c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e013      	b.n	800416c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	e008      	b.n	800416c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2300      	movs	r3, #0
 800416a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	461a      	mov	r2, r3
 800417a:	2300      	movs	r3, #0
 800417c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004190:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3301      	adds	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	429a      	cmp	r2, r3
 800419e:	d3b7      	bcc.n	8004110 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f043 0210 	orr.w	r2, r3, #16
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <USB_DevInit+0x2c4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004208:	7dfb      	ldrb	r3, [r7, #23]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004214:	b004      	add	sp, #16
 8004216:	4770      	bx	lr
 8004218:	803c3800 	.word	0x803c3800

0800421c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3301      	adds	r3, #1
 800422e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a13      	ldr	r2, [pc, #76]	; (8004280 <USB_FlushTxFifo+0x64>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d901      	bls.n	800423c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e01b      	b.n	8004274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	daf2      	bge.n	800422a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	019b      	lsls	r3, r3, #6
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <USB_FlushTxFifo+0x64>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e006      	b.n	8004274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b20      	cmp	r3, #32
 8004270:	d0f0      	beq.n	8004254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	00030d40 	.word	0x00030d40

08004284 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <USB_FlushRxFifo+0x5c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e018      	b.n	80042d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	daf2      	bge.n	8004290 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2210      	movs	r2, #16
 80042b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3301      	adds	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4a08      	ldr	r2, [pc, #32]	; (80042e0 <USB_FlushRxFifo+0x5c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e006      	b.n	80042d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d0f0      	beq.n	80042b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	00030d40 	.word	0x00030d40

080042e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004304:	4313      	orrs	r3, r2
 8004306:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004316:	b480      	push	{r7}
 8004318:	b087      	sub	sp, #28
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0306 	and.w	r3, r3, #6
 800432e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
 800433a:	e00a      	b.n	8004352 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d002      	beq.n	8004348 <USB_GetDevSpeed+0x32>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b06      	cmp	r3, #6
 8004346:	d102      	bne.n	800434e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004348:	2302      	movs	r3, #2
 800434a:	75fb      	strb	r3, [r7, #23]
 800434c:	e001      	b.n	8004352 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800434e:	230f      	movs	r3, #15
 8004350:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004352:	7dfb      	ldrb	r3, [r7, #23]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d13a      	bne.n	80043f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f003 030f 	and.w	r3, r3, #15
 800438c:	2101      	movs	r1, #1
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	b29b      	uxth	r3, r3
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800439a:	4313      	orrs	r3, r2
 800439c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d155      	bne.n	8004460 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	791b      	ldrb	r3, [r3, #4]
 80043ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	059b      	lsls	r3, r3, #22
 80043d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80043d8:	4313      	orrs	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	0151      	lsls	r1, r2, #5
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	440a      	add	r2, r1
 80043e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e036      	b.n	8004460 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	2101      	movs	r1, #1
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004410:	4313      	orrs	r3, r2
 8004412:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11a      	bne.n	8004460 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	791b      	ldrb	r3, [r3, #4]
 8004444:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004446:	430b      	orrs	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	440a      	add	r2, r1
 8004452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d161      	bne.n	8004550 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800449e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a2:	d11f      	bne.n	80044e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	0151      	lsls	r1, r2, #5
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	440a      	add	r2, r1
 80044ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	0151      	lsls	r1, r2, #5
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	440a      	add	r2, r1
 80044da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	2101      	movs	r1, #1
 80044f6:	fa01 f303 	lsl.w	r3, r1, r3
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004504:	4013      	ands	r3, r2
 8004506:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	2101      	movs	r1, #1
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	b29b      	uxth	r3, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	68f9      	ldr	r1, [r7, #12]
 8004524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004528:	4013      	ands	r3, r2
 800452a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	0159      	lsls	r1, r3, #5
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	440b      	add	r3, r1
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	4619      	mov	r1, r3
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <USB_DeactivateEndpoint+0x1b0>)
 800454a:	4013      	ands	r3, r2
 800454c:	600b      	str	r3, [r1, #0]
 800454e:	e060      	b.n	8004612 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4413      	add	r3, r2
 8004558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004562:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004566:	d11f      	bne.n	80045a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004586:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	2101      	movs	r1, #1
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	43db      	mvns	r3, r3
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c8:	4013      	ands	r3, r2
 80045ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	69da      	ldr	r2, [r3, #28]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	2101      	movs	r1, #1
 80045de:	fa01 f303 	lsl.w	r3, r1, r3
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	43db      	mvns	r3, r3
 80045e6:	68f9      	ldr	r1, [r7, #12]
 80045e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045ec:	4013      	ands	r3, r2
 80045ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	0159      	lsls	r1, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	440b      	add	r3, r1
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	4619      	mov	r1, r3
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <USB_DeactivateEndpoint+0x1b4>)
 800460e:	4013      	ands	r3, r2
 8004610:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	ec337800 	.word	0xec337800
 8004624:	eff37800 	.word	0xeff37800

08004628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b08a      	sub	sp, #40	; 0x28
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	4613      	mov	r3, r2
 8004634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	785b      	ldrb	r3, [r3, #1]
 8004644:	2b01      	cmp	r3, #1
 8004646:	f040 815c 	bne.w	8004902 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d132      	bne.n	80046b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	440a      	add	r2, r1
 800468c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	0cdb      	lsrs	r3, r3, #19
 80046b2:	04db      	lsls	r3, r3, #19
 80046b4:	6113      	str	r3, [r2, #16]
 80046b6:	e074      	b.n	80047a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d2:	0cdb      	lsrs	r3, r3, #19
 80046d4:	04db      	lsls	r3, r3, #19
 80046d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	69fa      	ldr	r2, [r7, #28]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004708:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	440b      	add	r3, r1
 8004714:	1e59      	subs	r1, r3, #1
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	fbb1 f3f3 	udiv	r3, r1, r3
 800471e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004720:	4b9d      	ldr	r3, [pc, #628]	; (8004998 <USB_EPStartXfer+0x370>)
 8004722:	400b      	ands	r3, r1
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	0148      	lsls	r0, r1, #5
 8004728:	69f9      	ldr	r1, [r7, #28]
 800472a:	4401      	add	r1, r0
 800472c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	0148      	lsls	r0, r1, #5
 800474e:	69f9      	ldr	r1, [r7, #28]
 8004750:	4401      	add	r1, r0
 8004752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004756:	4313      	orrs	r3, r2
 8004758:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	791b      	ldrb	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d11f      	bne.n	80047a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004780:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d14b      	bne.n	8004840 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d009      	beq.n	80047c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	791b      	ldrb	r3, [r3, #4]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d128      	bne.n	800481e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d110      	bne.n	80047fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e00f      	b.n	800481e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	69fa      	ldr	r2, [r7, #28]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e133      	b.n	8004aa8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800485e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d015      	beq.n	8004894 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 811b 	beq.w	8004aa8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f303 	lsl.w	r3, r1, r3
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800488e:	4313      	orrs	r3, r2
 8004890:	634b      	str	r3, [r1, #52]	; 0x34
 8004892:	e109      	b.n	8004aa8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d110      	bne.n	80048c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e00f      	b.n	80048e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	0151      	lsls	r1, r2, #5
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	440a      	add	r2, r1
 80048dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	781a      	ldrb	r2, [r3, #0]
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	b298      	uxth	r0, r3
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4603      	mov	r3, r0
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fade 	bl	8004ebc <USB_WritePacket>
 8004900:	e0d2      	b.n	8004aa8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800491c:	0cdb      	lsrs	r3, r3, #19
 800491e:	04db      	lsls	r3, r3, #19
 8004920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004944:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d126      	bne.n	800499c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	0148      	lsls	r0, r1, #5
 8004968:	69f9      	ldr	r1, [r7, #28]
 800496a:	4401      	add	r1, r0
 800496c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004970:	4313      	orrs	r3, r2
 8004972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004992:	6113      	str	r3, [r2, #16]
 8004994:	e03a      	b.n	8004a0c <USB_EPStartXfer+0x3e4>
 8004996:	bf00      	nop
 8004998:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	1e5a      	subs	r2, r3, #1
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	8afa      	ldrh	r2, [r7, #22]
 80049b8:	fb03 f202 	mul.w	r2, r3, r2
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	8afb      	ldrh	r3, [r7, #22]
 80049d0:	04d9      	lsls	r1, r3, #19
 80049d2:	4b38      	ldr	r3, [pc, #224]	; (8004ab4 <USB_EPStartXfer+0x48c>)
 80049d4:	400b      	ands	r3, r1
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	0148      	lsls	r0, r1, #5
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	4401      	add	r1, r0
 80049de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	69b9      	ldr	r1, [r7, #24]
 80049fe:	0148      	lsls	r0, r1, #5
 8004a00:	69f9      	ldr	r1, [r7, #28]
 8004a02:	4401      	add	r1, r0
 8004a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d10d      	bne.n	8004a2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6919      	ldr	r1, [r3, #16]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	791b      	ldrb	r3, [r3, #4]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d128      	bne.n	8004a88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d110      	bne.n	8004a68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e00f      	b.n	8004a88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	1ff80000 	.word	0x1ff80000

08004ab8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	f040 80ce 	bne.w	8004c76 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d132      	bne.n	8004b48 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	0151      	lsls	r1, r2, #5
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	440a      	add	r2, r1
 8004af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	0151      	lsls	r1, r2, #5
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	440a      	add	r2, r1
 8004b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b40:	0cdb      	lsrs	r3, r3, #19
 8004b42:	04db      	lsls	r3, r3, #19
 8004b44:	6113      	str	r3, [r2, #16]
 8004b46:	e04e      	b.n	8004be6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	0cdb      	lsrs	r3, r3, #19
 8004b64:	04db      	lsls	r3, r3, #19
 8004b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b8a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d903      	bls.n	8004ba0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	0151      	lsls	r1, r2, #5
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bcc:	691a      	ldr	r2, [r3, #16]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd6:	6939      	ldr	r1, [r7, #16]
 8004bd8:	0148      	lsls	r0, r1, #5
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	4401      	add	r1, r0
 8004bde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004be2:	4313      	orrs	r3, r2
 8004be4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11e      	bne.n	8004c2a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	e097      	b.n	8004d5a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8083 	beq.w	8004d5a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	f003 030f 	and.w	r3, r3, #15
 8004c64:	2101      	movs	r1, #1
 8004c66:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6a:	6979      	ldr	r1, [r7, #20]
 8004c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c70:	4313      	orrs	r3, r2
 8004c72:	634b      	str	r3, [r1, #52]	; 0x34
 8004c74:	e071      	b.n	8004d5a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	0cdb      	lsrs	r3, r3, #19
 8004c92:	04db      	lsls	r3, r3, #19
 8004c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cb4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cb8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d08:	6939      	ldr	r1, [r7, #16]
 8004d0a:	0148      	lsls	r0, r1, #5
 8004d0c:	6979      	ldr	r1, [r7, #20]
 8004d0e:	4401      	add	r1, r0
 8004d10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d14:	4313      	orrs	r3, r2
 8004d16:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10d      	bne.n	8004d3a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6919      	ldr	r1, [r3, #16]
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	460a      	mov	r2, r1
 8004d38:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d14a      	bne.n	8004e1c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d9e:	f040 8086 	bne.w	8004eae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	7812      	ldrb	r2, [r2, #0]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dc4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d902      	bls.n	8004e00 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8004dfe:	e056      	b.n	8004eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e18:	d0e7      	beq.n	8004dea <USB_EPStopXfer+0x82>
 8004e1a:	e048      	b.n	8004eae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e34:	d13b      	bne.n	8004eae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	7812      	ldrb	r2, [r2, #0]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e58:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d902      	bls.n	8004e94 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	75fb      	strb	r3, [r7, #23]
          break;
 8004e92:	e00c      	b.n	8004eae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eac:	d0e7      	beq.n	8004e7e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b089      	sub	sp, #36	; 0x24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	71fb      	strb	r3, [r7, #7]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d123      	bne.n	8004f2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ee2:	88bb      	ldrh	r3, [r7, #4]
 8004ee4:	3303      	adds	r3, #3
 8004ee6:	089b      	lsrs	r3, r3, #2
 8004ee8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
 8004eee:	e018      	b.n	8004f22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
 8004ef2:	031a      	lsls	r2, r3, #12
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efc:	461a      	mov	r2, r3
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d3e2      	bcc.n	8004ef0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3724      	adds	r7, #36	; 0x24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b08b      	sub	sp, #44	; 0x2c
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	4613      	mov	r3, r2
 8004f44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f56:	88fb      	ldrh	r3, [r7, #6]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	e014      	b.n	8004f8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	3301      	adds	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	3301      	adds	r3, #1
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	3301      	adds	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	3301      	adds	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	6a3a      	ldr	r2, [r7, #32]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3e6      	bcc.n	8004f64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f96:	8bfb      	ldrh	r3, [r7, #30]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01e      	beq.n	8004fda <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f107 0310 	add.w	r3, r7, #16
 8004fac:	6812      	ldr	r2, [r2, #0]
 8004fae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	701a      	strb	r2, [r3, #0]
      i++;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	3301      	adds	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fce:	8bfb      	ldrh	r3, [r7, #30]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fd4:	8bfb      	ldrh	r3, [r7, #30]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ea      	bne.n	8004fb0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	372c      	adds	r7, #44	; 0x2c
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	785b      	ldrb	r3, [r3, #1]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d12c      	bne.n	800505e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	db12      	blt.n	800503c <USB_EPSetStall+0x54>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00f      	beq.n	800503c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005036:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800503a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	0151      	lsls	r1, r2, #5
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	440a      	add	r2, r1
 8005052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005056:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	e02b      	b.n	80050b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	db12      	blt.n	8005096 <USB_EPSetStall+0xae>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00f      	beq.n	8005096 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005090:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005094:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d128      	bne.n	8005132 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	791b      	ldrb	r3, [r3, #4]
 8005104:	2b03      	cmp	r3, #3
 8005106:	d003      	beq.n	8005110 <USB_EPClearStall+0x4c>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d138      	bne.n	8005182 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	0151      	lsls	r1, r2, #5
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	440a      	add	r2, r1
 8005126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e027      	b.n	8005182 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005150:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	791b      	ldrb	r3, [r3, #4]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d003      	beq.n	8005162 <USB_EPClearStall+0x9e>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	791b      	ldrb	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d10f      	bne.n	8005182 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005180:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80051b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80051c4:	68f9      	ldr	r1, [r7, #12]
 80051c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520a:	f023 0302 	bic.w	r3, r3, #2
 800520e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800521e:	b480      	push	{r7}
 8005220:	b085      	sub	sp, #20
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005238:	f023 0303 	bic.w	r3, r3, #3
 800523c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524c:	f043 0302 	orr.w	r3, r3, #2
 8005250:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4013      	ands	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005278:	68fb      	ldr	r3, [r7, #12]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	4013      	ands	r3, r2
 80052a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	0c1b      	lsrs	r3, r3, #16
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	b29b      	uxth	r3, r3
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b085      	sub	sp, #20
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052fe:	78fb      	ldrb	r3, [r7, #3]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4013      	ands	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800531c:	68bb      	ldr	r3, [r7, #8]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	fa22 f303 	lsr.w	r3, r2, r3
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	b2db      	uxtb	r3, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	4013      	ands	r3, r2
 8005376:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005378:	68bb      	ldr	r3, [r7, #8]
}
 800537a:	4618      	mov	r0, r3
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f003 0301 	and.w	r3, r3, #1
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053c0:	f023 0307 	bic.w	r3, r3, #7
 80053c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	460b      	mov	r3, r1
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	333c      	adds	r3, #60	; 0x3c
 80053fe:	3304      	adds	r3, #4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4a26      	ldr	r2, [pc, #152]	; (80054a0 <USB_EP0_OutStart+0xb8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d90a      	bls.n	8005422 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005418:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800541c:	d101      	bne.n	8005422 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	e037      	b.n	8005492 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005450:	f043 0318 	orr.w	r3, r3, #24
 8005454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005464:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005468:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800546a:	7afb      	ldrb	r3, [r7, #11]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10f      	bne.n	8005490 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800548a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800548e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	4f54300a 	.word	0x4f54300a

080054a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3301      	adds	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a13      	ldr	r2, [pc, #76]	; (8005508 <USB_CoreReset+0x64>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e01b      	b.n	80054fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	daf2      	bge.n	80054b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <USB_CoreReset+0x64>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e006      	b.n	80054fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d0f0      	beq.n	80054da <USB_CoreReset+0x36>

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	00030d40 	.word	0x00030d40

0800550c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005518:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800551c:	f002 fca2 	bl	8007e64 <USBD_static_malloc>
 8005520:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	32b0      	adds	r2, #176	; 0xb0
 8005532:	2100      	movs	r1, #0
 8005534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005538:	2302      	movs	r3, #2
 800553a:	e0d4      	b.n	80056e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800553c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005540:	2100      	movs	r1, #0
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f002 fcf6 	bl	8007f34 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	32b0      	adds	r2, #176	; 0xb0
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	32b0      	adds	r2, #176	; 0xb0
 8005562:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	7c1b      	ldrb	r3, [r3, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d138      	bne.n	80055e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005574:	4b5e      	ldr	r3, [pc, #376]	; (80056f0 <USBD_CDC_Init+0x1e4>)
 8005576:	7819      	ldrb	r1, [r3, #0]
 8005578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557c:	2202      	movs	r2, #2
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f002 fb4d 	bl	8007c1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005584:	4b5a      	ldr	r3, [pc, #360]	; (80056f0 <USBD_CDC_Init+0x1e4>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	6879      	ldr	r1, [r7, #4]
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	3324      	adds	r3, #36	; 0x24
 800559a:	2201      	movs	r2, #1
 800559c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 80055a0:	7819      	ldrb	r1, [r3, #0]
 80055a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a6:	2202      	movs	r2, #2
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f002 fb38 	bl	8007c1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80055ae:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	f003 020f 	and.w	r2, r3, #15
 80055b6:	6879      	ldr	r1, [r7, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055c6:	2201      	movs	r2, #1
 80055c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055ca:	4b4b      	ldr	r3, [pc, #300]	; (80056f8 <USBD_CDC_Init+0x1ec>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	f003 020f 	and.w	r2, r3, #15
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3326      	adds	r3, #38	; 0x26
 80055e0:	2210      	movs	r2, #16
 80055e2:	801a      	strh	r2, [r3, #0]
 80055e4:	e035      	b.n	8005652 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80055e6:	4b42      	ldr	r3, [pc, #264]	; (80056f0 <USBD_CDC_Init+0x1e4>)
 80055e8:	7819      	ldrb	r1, [r3, #0]
 80055ea:	2340      	movs	r3, #64	; 0x40
 80055ec:	2202      	movs	r2, #2
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f002 fb15 	bl	8007c1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80055f4:	4b3e      	ldr	r3, [pc, #248]	; (80056f0 <USBD_CDC_Init+0x1e4>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f003 020f 	and.w	r2, r3, #15
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	440b      	add	r3, r1
 8005608:	3324      	adds	r3, #36	; 0x24
 800560a:	2201      	movs	r2, #1
 800560c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800560e:	4b39      	ldr	r3, [pc, #228]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 8005610:	7819      	ldrb	r1, [r3, #0]
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	2202      	movs	r2, #2
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f002 fb01 	bl	8007c1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800561c:	4b35      	ldr	r3, [pc, #212]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	f003 020f 	and.w	r2, r3, #15
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005634:	2201      	movs	r2, #1
 8005636:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005638:	4b2f      	ldr	r3, [pc, #188]	; (80056f8 <USBD_CDC_Init+0x1ec>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f003 020f 	and.w	r2, r3, #15
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3326      	adds	r3, #38	; 0x26
 800564e:	2210      	movs	r2, #16
 8005650:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005652:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <USBD_CDC_Init+0x1ec>)
 8005654:	7819      	ldrb	r1, [r3, #0]
 8005656:	2308      	movs	r3, #8
 8005658:	2203      	movs	r2, #3
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f002 fadf 	bl	8007c1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <USBD_CDC_Init+0x1ec>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	440b      	add	r3, r1
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	2201      	movs	r2, #1
 8005678:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	33b0      	adds	r3, #176	; 0xb0
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80056b0:	2302      	movs	r3, #2
 80056b2:	e018      	b.n	80056e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	7c1b      	ldrb	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 80056be:	7819      	ldrb	r1, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f002 fb96 	bl	8007dfc <USBD_LL_PrepareReceive>
 80056d0:	e008      	b.n	80056e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80056d2:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <USBD_CDC_Init+0x1e8>)
 80056d4:	7819      	ldrb	r1, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80056dc:	2340      	movs	r3, #64	; 0x40
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f002 fb8c 	bl	8007dfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000093 	.word	0x20000093
 80056f4:	20000094 	.word	0x20000094
 80056f8:	20000095 	.word	0x20000095

080056fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	460b      	mov	r3, r1
 8005706:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005708:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <USBD_CDC_DeInit+0xf8>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f002 faab 	bl	8007c6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005714:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <USBD_CDC_DeInit+0xf8>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	f003 020f 	and.w	r2, r3, #15
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	3324      	adds	r3, #36	; 0x24
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800572e:	4b32      	ldr	r3, [pc, #200]	; (80057f8 <USBD_CDC_DeInit+0xfc>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 fa98 	bl	8007c6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800573a:	4b2f      	ldr	r3, [pc, #188]	; (80057f8 <USBD_CDC_DeInit+0xfc>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005752:	2200      	movs	r2, #0
 8005754:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005756:	4b29      	ldr	r3, [pc, #164]	; (80057fc <USBD_CDC_DeInit+0x100>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f002 fa84 	bl	8007c6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005762:	4b26      	ldr	r3, [pc, #152]	; (80057fc <USBD_CDC_DeInit+0x100>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	f003 020f 	and.w	r2, r3, #15
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	3324      	adds	r3, #36	; 0x24
 8005778:	2200      	movs	r2, #0
 800577a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800577c:	4b1f      	ldr	r3, [pc, #124]	; (80057fc <USBD_CDC_DeInit+0x100>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	6879      	ldr	r1, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	3326      	adds	r3, #38	; 0x26
 8005792:	2200      	movs	r2, #0
 8005794:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	; 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01f      	beq.n	80057e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	33b0      	adds	r3, #176	; 0xb0
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	32b0      	adds	r2, #176	; 0xb0
 80057c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f002 fb58 	bl	8007e80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	32b0      	adds	r2, #176	; 0xb0
 80057da:	2100      	movs	r1, #0
 80057dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000093 	.word	0x20000093
 80057f8:	20000094 	.word	0x20000094
 80057fc:	20000095 	.word	0x20000095

08005800 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	32b0      	adds	r2, #176	; 0xb0
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800582c:	2303      	movs	r3, #3
 800582e:	e0bf      	b.n	80059b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005838:	2b00      	cmp	r3, #0
 800583a:	d050      	beq.n	80058de <USBD_CDC_Setup+0xde>
 800583c:	2b20      	cmp	r3, #32
 800583e:	f040 80af 	bne.w	80059a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	88db      	ldrh	r3, [r3, #6]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d03a      	beq.n	80058c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	b25b      	sxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	da1b      	bge.n	800588c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	33b0      	adds	r3, #176	; 0xb0
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800586a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	88d2      	ldrh	r2, [r2, #6]
 8005870:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	88db      	ldrh	r3, [r3, #6]
 8005876:	2b07      	cmp	r3, #7
 8005878:	bf28      	it	cs
 800587a:	2307      	movcs	r3, #7
 800587c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	89fa      	ldrh	r2, [r7, #14]
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fd89 	bl	800739c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800588a:	e090      	b.n	80059ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	785a      	ldrb	r2, [r3, #1]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	88db      	ldrh	r3, [r3, #6]
 800589a:	2b3f      	cmp	r3, #63	; 0x3f
 800589c:	d803      	bhi.n	80058a6 <USBD_CDC_Setup+0xa6>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	88db      	ldrh	r3, [r3, #6]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	e000      	b.n	80058a8 <USBD_CDC_Setup+0xa8>
 80058a6:	2240      	movs	r2, #64	; 0x40
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80058b6:	461a      	mov	r2, r3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 fd9b 	bl	80073f4 <USBD_CtlPrepareRx>
      break;
 80058be:	e076      	b.n	80059ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	33b0      	adds	r3, #176	; 0xb0
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	7850      	ldrb	r0, [r2, #1]
 80058d6:	2200      	movs	r2, #0
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	4798      	blx	r3
      break;
 80058dc:	e067      	b.n	80059ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	785b      	ldrb	r3, [r3, #1]
 80058e2:	2b0b      	cmp	r3, #11
 80058e4:	d851      	bhi.n	800598a <USBD_CDC_Setup+0x18a>
 80058e6:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <USBD_CDC_Setup+0xec>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	08005999 	.word	0x08005999
 80058f4:	0800598b 	.word	0x0800598b
 80058f8:	0800598b 	.word	0x0800598b
 80058fc:	0800598b 	.word	0x0800598b
 8005900:	0800598b 	.word	0x0800598b
 8005904:	0800598b 	.word	0x0800598b
 8005908:	0800598b 	.word	0x0800598b
 800590c:	0800598b 	.word	0x0800598b
 8005910:	0800598b 	.word	0x0800598b
 8005914:	08005947 	.word	0x08005947
 8005918:	08005971 	.word	0x08005971
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b03      	cmp	r3, #3
 8005926:	d107      	bne.n	8005938 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005928:	f107 030a 	add.w	r3, r7, #10
 800592c:	2202      	movs	r2, #2
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fd33 	bl	800739c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005936:	e032      	b.n	800599e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f001 fcbd 	bl	80072ba <USBD_CtlError>
            ret = USBD_FAIL;
 8005940:	2303      	movs	r3, #3
 8005942:	75fb      	strb	r3, [r7, #23]
          break;
 8005944:	e02b      	b.n	800599e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005952:	f107 030d 	add.w	r3, r7, #13
 8005956:	2201      	movs	r2, #1
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f001 fd1e 	bl	800739c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005960:	e01d      	b.n	800599e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 fca8 	bl	80072ba <USBD_CtlError>
            ret = USBD_FAIL;
 800596a:	2303      	movs	r3, #3
 800596c:	75fb      	strb	r3, [r7, #23]
          break;
 800596e:	e016      	b.n	800599e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b03      	cmp	r3, #3
 800597a:	d00f      	beq.n	800599c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fc9b 	bl	80072ba <USBD_CtlError>
            ret = USBD_FAIL;
 8005984:	2303      	movs	r3, #3
 8005986:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005988:	e008      	b.n	800599c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fc94 	bl	80072ba <USBD_CtlError>
          ret = USBD_FAIL;
 8005992:	2303      	movs	r3, #3
 8005994:	75fb      	strb	r3, [r7, #23]
          break;
 8005996:	e002      	b.n	800599e <USBD_CDC_Setup+0x19e>
          break;
 8005998:	bf00      	nop
 800599a:	e008      	b.n	80059ae <USBD_CDC_Setup+0x1ae>
          break;
 800599c:	bf00      	nop
      }
      break;
 800599e:	e006      	b.n	80059ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f001 fc89 	bl	80072ba <USBD_CtlError>
      ret = USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	75fb      	strb	r3, [r7, #23]
      break;
 80059ac:	bf00      	nop
  }

  return (uint8_t)ret;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80059ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	32b0      	adds	r2, #176	; 0xb0
 80059d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80059de:	2303      	movs	r3, #3
 80059e0:	e065      	b.n	8005aae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	32b0      	adds	r2, #176	; 0xb0
 80059ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 020f 	and.w	r2, r3, #15
 80059f8:	6879      	ldr	r1, [r7, #4]
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	3318      	adds	r3, #24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d02f      	beq.n	8005a6c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3318      	adds	r3, #24
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 010f 	and.w	r1, r3, #15
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4403      	add	r3, r0
 8005a34:	3348      	adds	r3, #72	; 0x48
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d112      	bne.n	8005a6c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	f003 020f 	and.w	r2, r3, #15
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3318      	adds	r3, #24
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a5e:	78f9      	ldrb	r1, [r7, #3]
 8005a60:	2300      	movs	r3, #0
 8005a62:	2200      	movs	r2, #0
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 f9a8 	bl	8007dba <USBD_LL_Transmit>
 8005a6a:	e01f      	b.n	8005aac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	33b0      	adds	r3, #176	; 0xb0
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d010      	beq.n	8005aac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	33b0      	adds	r3, #176	; 0xb0
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	460b      	mov	r3, r1
 8005ac0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	32b0      	adds	r2, #176	; 0xb0
 8005acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	32b0      	adds	r2, #176	; 0xb0
 8005adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e01a      	b.n	8005b1e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f002 f9a6 	bl	8007e3e <USBD_LL_GetRxDataSize>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	33b0      	adds	r3, #176	; 0xb0
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	32b0      	adds	r2, #176	; 0xb0
 8005b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e025      	b.n	8005b94 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	33b0      	adds	r3, #176	; 0xb0
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01a      	beq.n	8005b92 <USBD_CDC_EP0_RxReady+0x6c>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005b62:	2bff      	cmp	r3, #255	; 0xff
 8005b64:	d015      	beq.n	8005b92 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	33b0      	adds	r3, #176	; 0xb0
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005b7e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005b86:	b292      	uxth	r2, r2
 8005b88:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	22ff      	movs	r2, #255	; 0xff
 8005b8e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ba4:	2182      	movs	r1, #130	; 0x82
 8005ba6:	4818      	ldr	r0, [pc, #96]	; (8005c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ba8:	f000 fd4f 	bl	800664a <USBD_GetEpDesc>
 8005bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bae:	2101      	movs	r1, #1
 8005bb0:	4815      	ldr	r0, [pc, #84]	; (8005c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bb2:	f000 fd4a 	bl	800664a <USBD_GetEpDesc>
 8005bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bb8:	2181      	movs	r1, #129	; 0x81
 8005bba:	4813      	ldr	r0, [pc, #76]	; (8005c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005bbc:	f000 fd45 	bl	800664a <USBD_GetEpDesc>
 8005bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2210      	movs	r2, #16
 8005bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d006      	beq.n	8005be2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bdc:	711a      	strb	r2, [r3, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf0:	711a      	strb	r2, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2243      	movs	r2, #67	; 0x43
 8005bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bfc:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000050 	.word	0x20000050

08005c0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c14:	2182      	movs	r1, #130	; 0x82
 8005c16:	4818      	ldr	r0, [pc, #96]	; (8005c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c18:	f000 fd17 	bl	800664a <USBD_GetEpDesc>
 8005c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4815      	ldr	r0, [pc, #84]	; (8005c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c22:	f000 fd12 	bl	800664a <USBD_GetEpDesc>
 8005c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c28:	2181      	movs	r1, #129	; 0x81
 8005c2a:	4813      	ldr	r0, [pc, #76]	; (8005c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005c2c:	f000 fd0d 	bl	800664a <USBD_GetEpDesc>
 8005c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2210      	movs	r2, #16
 8005c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d006      	beq.n	8005c52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2200      	movs	r2, #0
 8005c48:	711a      	strb	r2, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f042 0202 	orr.w	r2, r2, #2
 8005c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	711a      	strb	r2, [r3, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f042 0202 	orr.w	r2, r2, #2
 8005c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2243      	movs	r2, #67	; 0x43
 8005c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c6c:	4b02      	ldr	r3, [pc, #8]	; (8005c78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000050 	.word	0x20000050

08005c7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005c84:	2182      	movs	r1, #130	; 0x82
 8005c86:	4818      	ldr	r0, [pc, #96]	; (8005ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c88:	f000 fcdf 	bl	800664a <USBD_GetEpDesc>
 8005c8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4815      	ldr	r0, [pc, #84]	; (8005ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c92:	f000 fcda 	bl	800664a <USBD_GetEpDesc>
 8005c96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005c98:	2181      	movs	r1, #129	; 0x81
 8005c9a:	4813      	ldr	r0, [pc, #76]	; (8005ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005c9c:	f000 fcd5 	bl	800664a <USBD_GetEpDesc>
 8005ca0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2210      	movs	r2, #16
 8005cac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cbc:	711a      	strb	r2, [r3, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd0:	711a      	strb	r2, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2243      	movs	r2, #67	; 0x43
 8005cda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005cdc:	4b02      	ldr	r3, [pc, #8]	; (8005ce8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20000050 	.word	0x20000050

08005cec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	220a      	movs	r2, #10
 8005cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	2000000c 	.word	0x2000000c

08005d0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e009      	b.n	8005d34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	33b0      	adds	r3, #176	; 0xb0
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	32b0      	adds	r2, #176	; 0xb0
 8005d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e008      	b.n	8005d78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	32b0      	adds	r2, #176	; 0xb0
 8005d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e004      	b.n	8005db2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
	...

08005dc0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32b0      	adds	r2, #176	; 0xb0
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	32b0      	adds	r2, #176	; 0xb0
 8005de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e025      	b.n	8005e3e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11f      	bne.n	8005e3c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005e04:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <USBD_CDC_TransmitPacket+0x88>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4403      	add	r3, r0
 8005e1e:	3318      	adds	r3, #24
 8005e20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <USBD_CDC_TransmitPacket+0x88>)
 8005e24:	7819      	ldrb	r1, [r3, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f001 ffc1 	bl	8007dba <USBD_LL_Transmit>

    ret = USBD_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000093 	.word	0x20000093

08005e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	32b0      	adds	r2, #176	; 0xb0
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	32b0      	adds	r2, #176	; 0xb0
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e018      	b.n	8005eac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	7c1b      	ldrb	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e82:	4b0c      	ldr	r3, [pc, #48]	; (8005eb4 <USBD_CDC_ReceivePacket+0x68>)
 8005e84:	7819      	ldrb	r1, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 ffb3 	bl	8007dfc <USBD_LL_PrepareReceive>
 8005e96:	e008      	b.n	8005eaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <USBD_CDC_ReceivePacket+0x68>)
 8005e9a:	7819      	ldrb	r1, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ea2:	2340      	movs	r3, #64	; 0x40
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f001 ffa9 	bl	8007dfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000094 	.word	0x20000094

08005eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e01f      	b.n	8005f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	79fa      	ldrb	r2, [r7, #7]
 8005f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f001 fe23 	bl	8007b50 <USBD_LL_Init>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e025      	b.n	8005f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	32ae      	adds	r2, #174	; 0xae
 8005f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00f      	beq.n	8005f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	32ae      	adds	r2, #174	; 0xae
 8005f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f107 020e 	add.w	r2, r7, #14
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	4602      	mov	r2, r0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 fe2b 	bl	8007be8 <USBD_LL_Start>
 8005f92:	4603      	mov	r3, r0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	460b      	mov	r3, r1
 8005fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	4798      	blx	r3
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	78fa      	ldrb	r2, [r7, #3]
 8006004:	4611      	mov	r1, r2
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	4618      	mov	r0, r3
 8006032:	f001 f908 	bl	8007246 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006044:	461a      	mov	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b02      	cmp	r3, #2
 8006058:	d01a      	beq.n	8006090 <USBD_LL_SetupStage+0x72>
 800605a:	2b02      	cmp	r3, #2
 800605c:	d822      	bhi.n	80060a4 <USBD_LL_SetupStage+0x86>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <USBD_LL_SetupStage+0x4a>
 8006062:	2b01      	cmp	r3, #1
 8006064:	d00a      	beq.n	800607c <USBD_LL_SetupStage+0x5e>
 8006066:	e01d      	b.n	80060a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fb5f 	bl	8006734 <USBD_StdDevReq>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]
      break;
 800607a:	e020      	b.n	80060be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fbc7 	bl	8006818 <USBD_StdItfReq>
 800608a:	4603      	mov	r3, r0
 800608c:	73fb      	strb	r3, [r7, #15]
      break;
 800608e:	e016      	b.n	80060be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fc29 	bl	80068f0 <USBD_StdEPReq>
 800609e:	4603      	mov	r3, r0
 80060a0:	73fb      	strb	r3, [r7, #15]
      break;
 80060a2:	e00c      	b.n	80060be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fdf8 	bl	8007ca8 <USBD_LL_StallEP>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	bf00      	nop
  }

  return ret;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	460b      	mov	r3, r1
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80060da:	7afb      	ldrb	r3, [r7, #11]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d16e      	bne.n	80061be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	f040 8098 	bne.w	8006224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d913      	bls.n	8006128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	68da      	ldr	r2, [r3, #12]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	4293      	cmp	r3, r2
 8006118:	bf28      	it	cs
 800611a:	4613      	movcs	r3, r2
 800611c:	461a      	mov	r2, r3
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f001 f984 	bl	800742e <USBD_CtlContinueRx>
 8006126:	e07d      	b.n	8006224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	2b02      	cmp	r3, #2
 8006134:	d014      	beq.n	8006160 <USBD_LL_DataOutStage+0x98>
 8006136:	2b02      	cmp	r3, #2
 8006138:	d81d      	bhi.n	8006176 <USBD_LL_DataOutStage+0xae>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <USBD_LL_DataOutStage+0x7c>
 800613e:	2b01      	cmp	r3, #1
 8006140:	d003      	beq.n	800614a <USBD_LL_DataOutStage+0x82>
 8006142:	e018      	b.n	8006176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	75bb      	strb	r3, [r7, #22]
            break;
 8006148:	e018      	b.n	800617c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006150:	b2db      	uxtb	r3, r3
 8006152:	4619      	mov	r1, r3
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fa5e 	bl	8006616 <USBD_CoreFindIF>
 800615a:	4603      	mov	r3, r0
 800615c:	75bb      	strb	r3, [r7, #22]
            break;
 800615e:	e00d      	b.n	800617c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006166:	b2db      	uxtb	r3, r3
 8006168:	4619      	mov	r1, r3
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fa60 	bl	8006630 <USBD_CoreFindEP>
 8006170:	4603      	mov	r3, r0
 8006172:	75bb      	strb	r3, [r7, #22]
            break;
 8006174:	e002      	b.n	800617c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	75bb      	strb	r3, [r7, #22]
            break;
 800617a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800617c:	7dbb      	ldrb	r3, [r7, #22]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d119      	bne.n	80061b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b03      	cmp	r3, #3
 800618c:	d113      	bne.n	80061b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800618e:	7dba      	ldrb	r2, [r7, #22]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	32ae      	adds	r2, #174	; 0xae
 8006194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800619e:	7dba      	ldrb	r2, [r7, #22]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80061a6:	7dba      	ldrb	r2, [r7, #22]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	32ae      	adds	r2, #174	; 0xae
 80061ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f001 f94a 	bl	8007450 <USBD_CtlSendStatus>
 80061bc:	e032      	b.n	8006224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80061be:	7afb      	ldrb	r3, [r7, #11]
 80061c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	4619      	mov	r1, r3
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fa31 	bl	8006630 <USBD_CoreFindEP>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061d2:	7dbb      	ldrb	r3, [r7, #22]
 80061d4:	2bff      	cmp	r3, #255	; 0xff
 80061d6:	d025      	beq.n	8006224 <USBD_LL_DataOutStage+0x15c>
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d122      	bne.n	8006224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d117      	bne.n	800621a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80061ea:	7dba      	ldrb	r2, [r7, #22]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	32ae      	adds	r2, #174	; 0xae
 80061f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00f      	beq.n	800621a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80061fa:	7dba      	ldrb	r2, [r7, #22]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006202:	7dba      	ldrb	r2, [r7, #22]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	32ae      	adds	r2, #174	; 0xae
 8006208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	7afa      	ldrb	r2, [r7, #11]
 8006210:	4611      	mov	r1, r2
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	4798      	blx	r3
 8006216:	4603      	mov	r3, r0
 8006218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006220:	7dfb      	ldrb	r3, [r7, #23]
 8006222:	e000      	b.n	8006226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b086      	sub	sp, #24
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	460b      	mov	r3, r1
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d16f      	bne.n	8006322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3314      	adds	r3, #20
 8006246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800624e:	2b02      	cmp	r3, #2
 8006250:	d15a      	bne.n	8006308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	429a      	cmp	r2, r3
 800625c:	d914      	bls.n	8006288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	1ad2      	subs	r2, r2, r3
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	461a      	mov	r2, r3
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f001 f8ac 	bl	80073d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800627a:	2300      	movs	r3, #0
 800627c:	2200      	movs	r2, #0
 800627e:	2100      	movs	r1, #0
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 fdbb 	bl	8007dfc <USBD_LL_PrepareReceive>
 8006286:	e03f      	b.n	8006308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d11c      	bne.n	80062ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800629c:	429a      	cmp	r2, r3
 800629e:	d316      	bcc.n	80062ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d20f      	bcs.n	80062ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062ae:	2200      	movs	r2, #0
 80062b0:	2100      	movs	r1, #0
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f001 f88d 	bl	80073d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062c0:	2300      	movs	r3, #0
 80062c2:	2200      	movs	r2, #0
 80062c4:	2100      	movs	r1, #0
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f001 fd98 	bl	8007dfc <USBD_LL_PrepareReceive>
 80062cc:	e01c      	b.n	8006308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d10f      	bne.n	80062fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f001 fcd3 	bl	8007ca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f001 f8b7 	bl	8007476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d03a      	beq.n	8006388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fe42 	bl	8005f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006320:	e032      	b.n	8006388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f97f 	bl	8006630 <USBD_CoreFindEP>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2bff      	cmp	r3, #255	; 0xff
 800633a:	d025      	beq.n	8006388 <USBD_LL_DataInStage+0x15a>
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d122      	bne.n	8006388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b03      	cmp	r3, #3
 800634c:	d11c      	bne.n	8006388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800634e:	7dfa      	ldrb	r2, [r7, #23]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	32ae      	adds	r2, #174	; 0xae
 8006354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800635e:	7dfa      	ldrb	r2, [r7, #23]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006366:	7dfa      	ldrb	r2, [r7, #23]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	32ae      	adds	r2, #174	; 0xae
 800636c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	7afa      	ldrb	r2, [r7, #11]
 8006374:	4611      	mov	r1, r2
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	4798      	blx	r3
 800637a:	4603      	mov	r3, r0
 800637c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800637e:	7dbb      	ldrb	r3, [r7, #22]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006384:	7dbb      	ldrb	r3, [r7, #22]
 8006386:	e000      	b.n	800638a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d014      	beq.n	80063f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00e      	beq.n	80063f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6852      	ldr	r2, [r2, #4]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	4611      	mov	r1, r2
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063f8:	2340      	movs	r3, #64	; 0x40
 80063fa:	2200      	movs	r2, #0
 80063fc:	2100      	movs	r1, #0
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fc0d 	bl	8007c1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2240      	movs	r2, #64	; 0x40
 8006410:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	2200      	movs	r2, #0
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 fbff 	bl	8007c1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2240      	movs	r2, #64	; 0x40
 800642a:	621a      	str	r2, [r3, #32]

  return ret;
 800642c:	7bfb      	ldrb	r3, [r7, #15]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006456:	b480      	push	{r7}
 8006458:	b083      	sub	sp, #12
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006464:	b2da      	uxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2204      	movs	r2, #4
 8006470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b04      	cmp	r3, #4
 8006494:	d106      	bne.n	80064a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800649c:	b2da      	uxtb	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d110      	bne.n	80064e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00b      	beq.n	80064e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	460b      	mov	r3, r1
 80064fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	32ae      	adds	r2, #174	; 0xae
 8006508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006510:	2303      	movs	r3, #3
 8006512:	e01c      	b.n	800654e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b03      	cmp	r3, #3
 800651e:	d115      	bne.n	800654c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32ae      	adds	r2, #174	; 0xae
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00b      	beq.n	800654c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	32ae      	adds	r2, #174	; 0xae
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	4611      	mov	r1, r2
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	32ae      	adds	r2, #174	; 0xae
 800656c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	e01c      	b.n	80065b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b03      	cmp	r3, #3
 8006582:	d115      	bne.n	80065b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	32ae      	adds	r2, #174	; 0xae
 800658e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00b      	beq.n	80065b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32ae      	adds	r2, #174	; 0xae
 80065a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	4611      	mov	r1, r2
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6852      	ldr	r2, [r2, #4]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	4611      	mov	r1, r2
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800660c:	7bfb      	ldrb	r3, [r7, #15]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006622:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006624:	4618      	mov	r0, r3
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800663c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b086      	sub	sp, #24
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	885b      	ldrh	r3, [r3, #2]
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29b      	uxth	r3, r3
 800666e:	429a      	cmp	r2, r3
 8006670:	d920      	bls.n	80066b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800667a:	e013      	b.n	80066a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800667c:	f107 030a 	add.w	r3, r7, #10
 8006680:	4619      	mov	r1, r3
 8006682:	6978      	ldr	r0, [r7, #20]
 8006684:	f000 f81b 	bl	80066be <USBD_GetNextDesc>
 8006688:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b05      	cmp	r3, #5
 8006690:	d108      	bne.n	80066a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	789b      	ldrb	r3, [r3, #2]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	429a      	cmp	r2, r3
 800669e:	d008      	beq.n	80066b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d8e5      	bhi.n	800667c <USBD_GetEpDesc+0x32>
 80066b0:	e000      	b.n	80066b4 <USBD_GetEpDesc+0x6a>
          break;
 80066b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80066b4:	693b      	ldr	r3, [r7, #16]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	881a      	ldrh	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066ea:	68fb      	ldr	r3, [r7, #12]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3301      	adds	r3, #1
 800670e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006716:	8a3b      	ldrh	r3, [r7, #16]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	b21a      	sxth	r2, r3
 800671c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006720:	4313      	orrs	r3, r2
 8006722:	b21b      	sxth	r3, r3
 8006724:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006726:	89fb      	ldrh	r3, [r7, #14]
}
 8006728:	4618      	mov	r0, r3
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d005      	beq.n	800675a <USBD_StdDevReq+0x26>
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d857      	bhi.n	8006802 <USBD_StdDevReq+0xce>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00f      	beq.n	8006776 <USBD_StdDevReq+0x42>
 8006756:	2b20      	cmp	r3, #32
 8006758:	d153      	bne.n	8006802 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	32ae      	adds	r2, #174	; 0xae
 8006764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
 8006770:	4603      	mov	r3, r0
 8006772:	73fb      	strb	r3, [r7, #15]
      break;
 8006774:	e04a      	b.n	800680c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b09      	cmp	r3, #9
 800677c:	d83b      	bhi.n	80067f6 <USBD_StdDevReq+0xc2>
 800677e:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <USBD_StdDevReq+0x50>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067d9 	.word	0x080067d9
 8006788:	080067ed 	.word	0x080067ed
 800678c:	080067f7 	.word	0x080067f7
 8006790:	080067e3 	.word	0x080067e3
 8006794:	080067f7 	.word	0x080067f7
 8006798:	080067b7 	.word	0x080067b7
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067f7 	.word	0x080067f7
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067c1 	.word	0x080067c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa3c 	bl	8006c2c <USBD_GetDescriptor>
          break;
 80067b4:	e024      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fba1 	bl	8006f00 <USBD_SetAddress>
          break;
 80067be:	e01f      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbe0 	bl	8006f88 <USBD_SetConfig>
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
          break;
 80067cc:	e018      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fc83 	bl	80070dc <USBD_GetConfig>
          break;
 80067d6:	e013      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fcb4 	bl	8007148 <USBD_GetStatus>
          break;
 80067e0:	e00e      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fce3 	bl	80071b0 <USBD_SetFeature>
          break;
 80067ea:	e009      	b.n	8006800 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fd07 	bl	8007202 <USBD_ClrFeature>
          break;
 80067f4:	e004      	b.n	8006800 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fd5e 	bl	80072ba <USBD_CtlError>
          break;
 80067fe:	bf00      	nop
      }
      break;
 8006800:	e004      	b.n	800680c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fd58 	bl	80072ba <USBD_CtlError>
      break;
 800680a:	bf00      	nop
  }

  return ret;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop

08006818 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	d005      	beq.n	800683e <USBD_StdItfReq+0x26>
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d852      	bhi.n	80068dc <USBD_StdItfReq+0xc4>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <USBD_StdItfReq+0x26>
 800683a:	2b20      	cmp	r3, #32
 800683c:	d14e      	bne.n	80068dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006844:	b2db      	uxtb	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	2b02      	cmp	r3, #2
 800684a:	d840      	bhi.n	80068ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	889b      	ldrh	r3, [r3, #4]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	d836      	bhi.n	80068c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	889b      	ldrh	r3, [r3, #4]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fed9 	bl	8006616 <USBD_CoreFindIF>
 8006864:	4603      	mov	r3, r0
 8006866:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2bff      	cmp	r3, #255	; 0xff
 800686c:	d01d      	beq.n	80068aa <USBD_StdItfReq+0x92>
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11a      	bne.n	80068aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006874:	7bba      	ldrb	r2, [r7, #14]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32ae      	adds	r2, #174	; 0xae
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00f      	beq.n	80068a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006884:	7bba      	ldrb	r2, [r7, #14]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800688c:	7bba      	ldrb	r2, [r7, #14]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32ae      	adds	r2, #174	; 0xae
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068a2:	e004      	b.n	80068ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80068a8:	e001      	b.n	80068ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80068aa:	2303      	movs	r3, #3
 80068ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	88db      	ldrh	r3, [r3, #6]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d110      	bne.n	80068d8 <USBD_StdItfReq+0xc0>
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fdc7 	bl	8007450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80068c2:	e009      	b.n	80068d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80068c4:	6839      	ldr	r1, [r7, #0]
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fcf7 	bl	80072ba <USBD_CtlError>
          break;
 80068cc:	e004      	b.n	80068d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 fcf2 	bl	80072ba <USBD_CtlError>
          break;
 80068d6:	e000      	b.n	80068da <USBD_StdItfReq+0xc2>
          break;
 80068d8:	bf00      	nop
      }
      break;
 80068da:	e004      	b.n	80068e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fceb 	bl	80072ba <USBD_CtlError>
      break;
 80068e4:	bf00      	nop
  }

  return ret;
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	889b      	ldrh	r3, [r3, #4]
 8006902:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800690c:	2b40      	cmp	r3, #64	; 0x40
 800690e:	d007      	beq.n	8006920 <USBD_StdEPReq+0x30>
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	f200 817f 	bhi.w	8006c14 <USBD_StdEPReq+0x324>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d02a      	beq.n	8006970 <USBD_StdEPReq+0x80>
 800691a:	2b20      	cmp	r3, #32
 800691c:	f040 817a 	bne.w	8006c14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fe83 	bl	8006630 <USBD_CoreFindEP>
 800692a:	4603      	mov	r3, r0
 800692c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	2bff      	cmp	r3, #255	; 0xff
 8006932:	f000 8174 	beq.w	8006c1e <USBD_StdEPReq+0x32e>
 8006936:	7b7b      	ldrb	r3, [r7, #13]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 8170 	bne.w	8006c1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800693e:	7b7a      	ldrb	r2, [r7, #13]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006946:	7b7a      	ldrb	r2, [r7, #13]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32ae      	adds	r2, #174	; 0xae
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8163 	beq.w	8006c1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006958:	7b7a      	ldrb	r2, [r7, #13]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32ae      	adds	r2, #174	; 0xae
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	4798      	blx	r3
 800696a:	4603      	mov	r3, r0
 800696c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800696e:	e156      	b.n	8006c1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d008      	beq.n	800698a <USBD_StdEPReq+0x9a>
 8006978:	2b03      	cmp	r3, #3
 800697a:	f300 8145 	bgt.w	8006c08 <USBD_StdEPReq+0x318>
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 809b 	beq.w	8006aba <USBD_StdEPReq+0x1ca>
 8006984:	2b01      	cmp	r3, #1
 8006986:	d03c      	beq.n	8006a02 <USBD_StdEPReq+0x112>
 8006988:	e13e      	b.n	8006c08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d002      	beq.n	800699c <USBD_StdEPReq+0xac>
 8006996:	2b03      	cmp	r3, #3
 8006998:	d016      	beq.n	80069c8 <USBD_StdEPReq+0xd8>
 800699a:	e02c      	b.n	80069f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <USBD_StdEPReq+0xce>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b80      	cmp	r3, #128	; 0x80
 80069a6:	d00a      	beq.n	80069be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 f97b 	bl	8007ca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80069b2:	2180      	movs	r1, #128	; 0x80
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 f977 	bl	8007ca8 <USBD_LL_StallEP>
 80069ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80069bc:	e020      	b.n	8006a00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fc7a 	bl	80072ba <USBD_CtlError>
              break;
 80069c6:	e01b      	b.n	8006a00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	885b      	ldrh	r3, [r3, #2]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10e      	bne.n	80069ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <USBD_StdEPReq+0xfe>
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	2b80      	cmp	r3, #128	; 0x80
 80069da:	d008      	beq.n	80069ee <USBD_StdEPReq+0xfe>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	88db      	ldrh	r3, [r3, #6]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 f95d 	bl	8007ca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fd2e 	bl	8007450 <USBD_CtlSendStatus>

              break;
 80069f4:	e004      	b.n	8006a00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc5e 	bl	80072ba <USBD_CtlError>
              break;
 80069fe:	bf00      	nop
          }
          break;
 8006a00:	e107      	b.n	8006c12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d002      	beq.n	8006a14 <USBD_StdEPReq+0x124>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d016      	beq.n	8006a40 <USBD_StdEPReq+0x150>
 8006a12:	e04b      	b.n	8006aac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <USBD_StdEPReq+0x146>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b80      	cmp	r3, #128	; 0x80
 8006a1e:	d00a      	beq.n	8006a36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f93f 	bl	8007ca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f93b 	bl	8007ca8 <USBD_LL_StallEP>
 8006a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a34:	e040      	b.n	8006ab8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fc3e 	bl	80072ba <USBD_CtlError>
              break;
 8006a3e:	e03b      	b.n	8006ab8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d136      	bne.n	8006ab6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f945 	bl	8007ce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fcf7 	bl	8007450 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a62:	7bbb      	ldrb	r3, [r7, #14]
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fde2 	bl	8006630 <USBD_CoreFindEP>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a70:	7b7b      	ldrb	r3, [r7, #13]
 8006a72:	2bff      	cmp	r3, #255	; 0xff
 8006a74:	d01f      	beq.n	8006ab6 <USBD_StdEPReq+0x1c6>
 8006a76:	7b7b      	ldrb	r3, [r7, #13]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d11c      	bne.n	8006ab6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006a7c:	7b7a      	ldrb	r2, [r7, #13]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006a84:	7b7a      	ldrb	r2, [r7, #13]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32ae      	adds	r2, #174	; 0xae
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d010      	beq.n	8006ab6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a94:	7b7a      	ldrb	r2, [r7, #13]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32ae      	adds	r2, #174	; 0xae
 8006a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006aaa:	e004      	b.n	8006ab6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fc03 	bl	80072ba <USBD_CtlError>
              break;
 8006ab4:	e000      	b.n	8006ab8 <USBD_StdEPReq+0x1c8>
              break;
 8006ab6:	bf00      	nop
          }
          break;
 8006ab8:	e0ab      	b.n	8006c12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d002      	beq.n	8006acc <USBD_StdEPReq+0x1dc>
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d032      	beq.n	8006b30 <USBD_StdEPReq+0x240>
 8006aca:	e097      	b.n	8006bfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006acc:	7bbb      	ldrb	r3, [r7, #14]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <USBD_StdEPReq+0x1f2>
 8006ad2:	7bbb      	ldrb	r3, [r7, #14]
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d004      	beq.n	8006ae2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 fbed 	bl	80072ba <USBD_CtlError>
                break;
 8006ae0:	e091      	b.n	8006c06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da0b      	bge.n	8006b02 <USBD_StdEPReq+0x212>
 8006aea:	7bbb      	ldrb	r3, [r7, #14]
 8006aec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	3310      	adds	r3, #16
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	3304      	adds	r3, #4
 8006b00:	e00b      	b.n	8006b1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	4413      	add	r3, r2
 8006b18:	3304      	adds	r3, #4
 8006b1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2202      	movs	r2, #2
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc37 	bl	800739c <USBD_CtlSendData>
              break;
 8006b2e:	e06a      	b.n	8006c06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	da11      	bge.n	8006b5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	f003 020f 	and.w	r2, r3, #15
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	3324      	adds	r3, #36	; 0x24
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d117      	bne.n	8006b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fbb0 	bl	80072ba <USBD_CtlError>
                  break;
 8006b5a:	e054      	b.n	8006c06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	f003 020f 	and.w	r2, r3, #15
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	4613      	mov	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b72:	881b      	ldrh	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fb9d 	bl	80072ba <USBD_CtlError>
                  break;
 8006b80:	e041      	b.n	8006c06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da0b      	bge.n	8006ba2 <USBD_StdEPReq+0x2b2>
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	3310      	adds	r3, #16
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	e00b      	b.n	8006bba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3304      	adds	r3, #4
 8006bba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006bbc:	7bbb      	ldrb	r3, [r7, #14]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <USBD_StdEPReq+0x2d8>
 8006bc2:	7bbb      	ldrb	r3, [r7, #14]
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d103      	bne.n	8006bd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e00e      	b.n	8006bee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f8a5 	bl	8007d24 <USBD_LL_IsStallEP>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d003      	beq.n	8006be8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	e002      	b.n	8006bee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fbd1 	bl	800739c <USBD_CtlSendData>
              break;
 8006bfa:	e004      	b.n	8006c06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fb5b 	bl	80072ba <USBD_CtlError>
              break;
 8006c04:	bf00      	nop
          }
          break;
 8006c06:	e004      	b.n	8006c12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fb55 	bl	80072ba <USBD_CtlError>
          break;
 8006c10:	bf00      	nop
      }
      break;
 8006c12:	e005      	b.n	8006c20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fb4f 	bl	80072ba <USBD_CtlError>
      break;
 8006c1c:	e000      	b.n	8006c20 <USBD_StdEPReq+0x330>
      break;
 8006c1e:	bf00      	nop
  }

  return ret;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	0a1b      	lsrs	r3, r3, #8
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	f200 8128 	bhi.w	8006ea2 <USBD_GetDescriptor+0x276>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <USBD_GetDescriptor+0x2c>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c75 	.word	0x08006c75
 8006c5c:	08006c8d 	.word	0x08006c8d
 8006c60:	08006ccd 	.word	0x08006ccd
 8006c64:	08006ea3 	.word	0x08006ea3
 8006c68:	08006ea3 	.word	0x08006ea3
 8006c6c:	08006e43 	.word	0x08006e43
 8006c70:	08006e6f 	.word	0x08006e6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	7c12      	ldrb	r2, [r2, #16]
 8006c80:	f107 0108 	add.w	r1, r7, #8
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
 8006c88:	60f8      	str	r0, [r7, #12]
      break;
 8006c8a:	e112      	b.n	8006eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9c:	f107 0208 	add.w	r2, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cae:	e100      	b.n	8006eb2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	f107 0208 	add.w	r2, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	701a      	strb	r2, [r3, #0]
      break;
 8006cca:	e0f2      	b.n	8006eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	885b      	ldrh	r3, [r3, #2]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b05      	cmp	r3, #5
 8006cd4:	f200 80ac 	bhi.w	8006e30 <USBD_GetDescriptor+0x204>
 8006cd8:	a201      	add	r2, pc, #4	; (adr r2, 8006ce0 <USBD_GetDescriptor+0xb4>)
 8006cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cde:	bf00      	nop
 8006ce0:	08006cf9 	.word	0x08006cf9
 8006ce4:	08006d2d 	.word	0x08006d2d
 8006ce8:	08006d61 	.word	0x08006d61
 8006cec:	08006d95 	.word	0x08006d95
 8006cf0:	08006dc9 	.word	0x08006dc9
 8006cf4:	08006dfd 	.word	0x08006dfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00b      	beq.n	8006d1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	7c12      	ldrb	r2, [r2, #16]
 8006d10:	f107 0108 	add.w	r1, r7, #8
 8006d14:	4610      	mov	r0, r2
 8006d16:	4798      	blx	r3
 8006d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d1a:	e091      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 facb 	bl	80072ba <USBD_CtlError>
            err++;
 8006d24:	7afb      	ldrb	r3, [r7, #11]
 8006d26:	3301      	adds	r3, #1
 8006d28:	72fb      	strb	r3, [r7, #11]
          break;
 8006d2a:	e089      	b.n	8006e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00b      	beq.n	8006d50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	7c12      	ldrb	r2, [r2, #16]
 8006d44:	f107 0108 	add.w	r1, r7, #8
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d4e:	e077      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fab1 	bl	80072ba <USBD_CtlError>
            err++;
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d5e:	e06f      	b.n	8006e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7c12      	ldrb	r2, [r2, #16]
 8006d78:	f107 0108 	add.w	r1, r7, #8
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4798      	blx	r3
 8006d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d82:	e05d      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fa97 	bl	80072ba <USBD_CtlError>
            err++;
 8006d8c:	7afb      	ldrb	r3, [r7, #11]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	72fb      	strb	r3, [r7, #11]
          break;
 8006d92:	e055      	b.n	8006e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	7c12      	ldrb	r2, [r2, #16]
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006db6:	e043      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fa7d 	bl	80072ba <USBD_CtlError>
            err++;
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dc6:	e03b      	b.n	8006e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7c12      	ldrb	r2, [r2, #16]
 8006de0:	f107 0108 	add.w	r1, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dea:	e029      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa63 	bl	80072ba <USBD_CtlError>
            err++;
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	3301      	adds	r3, #1
 8006df8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfa:	e021      	b.n	8006e40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e1e:	e00f      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa49 	bl	80072ba <USBD_CtlError>
            err++;
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e2e:	e007      	b.n	8006e40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa41 	bl	80072ba <USBD_CtlError>
          err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006e3e:	bf00      	nop
      }
      break;
 8006e40:	e037      	b.n	8006eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	7c1b      	ldrb	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	f107 0208 	add.w	r2, r7, #8
 8006e56:	4610      	mov	r0, r2
 8006e58:	4798      	blx	r3
 8006e5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e5c:	e029      	b.n	8006eb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fa2a 	bl	80072ba <USBD_CtlError>
        err++;
 8006e66:	7afb      	ldrb	r3, [r7, #11]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006e6c:	e021      	b.n	8006eb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7c1b      	ldrb	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10d      	bne.n	8006e92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f107 0208 	add.w	r2, r7, #8
 8006e82:	4610      	mov	r0, r2
 8006e84:	4798      	blx	r3
 8006e86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2207      	movs	r2, #7
 8006e8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e90:	e00f      	b.n	8006eb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fa10 	bl	80072ba <USBD_CtlError>
        err++;
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006ea0:	e007      	b.n	8006eb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa08 	bl	80072ba <USBD_CtlError>
      err++;
 8006eaa:	7afb      	ldrb	r3, [r7, #11]
 8006eac:	3301      	adds	r3, #1
 8006eae:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb0:	bf00      	nop
  }

  if (err != 0U)
 8006eb2:	7afb      	ldrb	r3, [r7, #11]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d11e      	bne.n	8006ef6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d016      	beq.n	8006eee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	88da      	ldrh	r2, [r3, #6]
 8006eca:	893b      	ldrh	r3, [r7, #8]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	bf28      	it	cs
 8006ed0:	4613      	movcs	r3, r2
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ed6:	893b      	ldrh	r3, [r7, #8]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa5d 	bl	800739c <USBD_CtlSendData>
 8006ee2:	e009      	b.n	8006ef8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006ee4:	6839      	ldr	r1, [r7, #0]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9e7 	bl	80072ba <USBD_CtlError>
 8006eec:	e004      	b.n	8006ef8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 faae 	bl	8007450 <USBD_CtlSendStatus>
 8006ef4:	e000      	b.n	8006ef8 <USBD_GetDescriptor+0x2cc>
    return;
 8006ef6:	bf00      	nop
  }
}
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop

08006f00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	889b      	ldrh	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d131      	bne.n	8006f76 <USBD_SetAddress+0x76>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	88db      	ldrh	r3, [r3, #6]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d12d      	bne.n	8006f76 <USBD_SetAddress+0x76>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f20:	d829      	bhi.n	8006f76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d104      	bne.n	8006f44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9bc 	bl	80072ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f42:	e01d      	b.n	8006f80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7bfa      	ldrb	r2, [r7, #15]
 8006f48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 ff13 	bl	8007d7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa7a 	bl	8007450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6a:	e009      	b.n	8006f80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f74:	e004      	b.n	8006f80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f99e 	bl	80072ba <USBD_CtlError>
  }
}
 8006f7e:	bf00      	nop
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	885b      	ldrh	r3, [r3, #2]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	4b4e      	ldr	r3, [pc, #312]	; (80070d8 <USBD_SetConfig+0x150>)
 8006f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fa0:	4b4d      	ldr	r3, [pc, #308]	; (80070d8 <USBD_SetConfig+0x150>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d905      	bls.n	8006fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f985 	bl	80072ba <USBD_CtlError>
    return USBD_FAIL;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e08c      	b.n	80070ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d002      	beq.n	8006fc6 <USBD_SetConfig+0x3e>
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d029      	beq.n	8007018 <USBD_SetConfig+0x90>
 8006fc4:	e075      	b.n	80070b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006fc6:	4b44      	ldr	r3, [pc, #272]	; (80070d8 <USBD_SetConfig+0x150>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d020      	beq.n	8007010 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006fce:	4b42      	ldr	r3, [pc, #264]	; (80070d8 <USBD_SetConfig+0x150>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fd8:	4b3f      	ldr	r3, [pc, #252]	; (80070d8 <USBD_SetConfig+0x150>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe ffe7 	bl	8005fb2 <USBD_SetClassConfig>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d008      	beq.n	8007000 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f962 	bl	80072ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ffe:	e065      	b.n	80070cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fa25 	bl	8007450 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2203      	movs	r2, #3
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800700e:	e05d      	b.n	80070cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa1d 	bl	8007450 <USBD_CtlSendStatus>
      break;
 8007016:	e059      	b.n	80070cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007018:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <USBD_SetConfig+0x150>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d112      	bne.n	8007046 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007028:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <USBD_SetConfig+0x150>)
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007032:	4b29      	ldr	r3, [pc, #164]	; (80070d8 <USBD_SetConfig+0x150>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fe ffd6 	bl	8005fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fa06 	bl	8007450 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007044:	e042      	b.n	80070cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007046:	4b24      	ldr	r3, [pc, #144]	; (80070d8 <USBD_SetConfig+0x150>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	429a      	cmp	r2, r3
 8007052:	d02a      	beq.n	80070aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fe ffc4 	bl	8005fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007062:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <USBD_SetConfig+0x150>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800706c:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <USBD_SetConfig+0x150>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fe ff9d 	bl	8005fb2 <USBD_SetClassConfig>
 8007078:	4603      	mov	r3, r0
 800707a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00f      	beq.n	80070a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f918 	bl	80072ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fe ffa9 	bl	8005fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80070a0:	e014      	b.n	80070cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f9d4 	bl	8007450 <USBD_CtlSendStatus>
      break;
 80070a8:	e010      	b.n	80070cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9d0 	bl	8007450 <USBD_CtlSendStatus>
      break;
 80070b0:	e00c      	b.n	80070cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f900 	bl	80072ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <USBD_SetConfig+0x150>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7fe ff92 	bl	8005fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	73fb      	strb	r3, [r7, #15]
      break;
 80070ca:	bf00      	nop
  }

  return ret;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	20000390 	.word	0x20000390

080070dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88db      	ldrh	r3, [r3, #6]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d004      	beq.n	80070f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f8e2 	bl	80072ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070f6:	e023      	b.n	8007140 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	dc02      	bgt.n	800710a <USBD_GetConfig+0x2e>
 8007104:	2b00      	cmp	r3, #0
 8007106:	dc03      	bgt.n	8007110 <USBD_GetConfig+0x34>
 8007108:	e015      	b.n	8007136 <USBD_GetConfig+0x5a>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d00b      	beq.n	8007126 <USBD_GetConfig+0x4a>
 800710e:	e012      	b.n	8007136 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3308      	adds	r3, #8
 800711a:	2201      	movs	r2, #1
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f93c 	bl	800739c <USBD_CtlSendData>
        break;
 8007124:	e00c      	b.n	8007140 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3304      	adds	r3, #4
 800712a:	2201      	movs	r2, #1
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f934 	bl	800739c <USBD_CtlSendData>
        break;
 8007134:	e004      	b.n	8007140 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8be 	bl	80072ba <USBD_CtlError>
        break;
 800713e:	bf00      	nop
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	2b02      	cmp	r3, #2
 800715e:	d81e      	bhi.n	800719e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	88db      	ldrh	r3, [r3, #6]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d004      	beq.n	8007172 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f8a5 	bl	80072ba <USBD_CtlError>
        break;
 8007170:	e01a      	b.n	80071a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d005      	beq.n	800718e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	330c      	adds	r3, #12
 8007192:	2202      	movs	r2, #2
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f900 	bl	800739c <USBD_CtlSendData>
      break;
 800719c:	e004      	b.n	80071a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f88a 	bl	80072ba <USBD_CtlError>
      break;
 80071a6:	bf00      	nop
  }
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	885b      	ldrh	r3, [r3, #2]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f940 	bl	8007450 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80071d0:	e013      	b.n	80071fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	885b      	ldrh	r3, [r3, #2]
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	d10b      	bne.n	80071f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	889b      	ldrh	r3, [r3, #4]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 f930 	bl	8007450 <USBD_CtlSendStatus>
}
 80071f0:	e003      	b.n	80071fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f860 	bl	80072ba <USBD_CtlError>
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	2b02      	cmp	r3, #2
 8007218:	d80b      	bhi.n	8007232 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	885b      	ldrh	r3, [r3, #2]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d10c      	bne.n	800723c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2200      	movs	r2, #0
 8007226:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f910 	bl	8007450 <USBD_CtlSendStatus>
      }
      break;
 8007230:	e004      	b.n	800723c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f840 	bl	80072ba <USBD_CtlError>
      break;
 800723a:	e000      	b.n	800723e <USBD_ClrFeature+0x3c>
      break;
 800723c:	bf00      	nop
  }
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3301      	adds	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff fa41 	bl	80066f8 <SWAPBYTE>
 8007276:	4603      	mov	r3, r0
 8007278:	461a      	mov	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	3301      	adds	r3, #1
 8007282:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3301      	adds	r3, #1
 8007288:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f7ff fa34 	bl	80066f8 <SWAPBYTE>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3301      	adds	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fa27 	bl	80066f8 <SWAPBYTE>
 80072aa:	4603      	mov	r3, r0
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	80da      	strh	r2, [r3, #6]
}
 80072b2:	bf00      	nop
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b082      	sub	sp, #8
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80072c4:	2180      	movs	r1, #128	; 0x80
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fcee 	bl	8007ca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80072cc:	2100      	movs	r1, #0
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fcea 	bl	8007ca8 <USBD_LL_StallEP>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d036      	beq.n	8007360 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80072f6:	6938      	ldr	r0, [r7, #16]
 80072f8:	f000 f836 	bl	8007368 <USBD_GetLen>
 80072fc:	4603      	mov	r3, r0
 80072fe:	3301      	adds	r3, #1
 8007300:	b29b      	uxth	r3, r3
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4413      	add	r3, r2
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	701a      	strb	r2, [r3, #0]
  idx++;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	3301      	adds	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800731c:	7dfb      	ldrb	r3, [r7, #23]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	2203      	movs	r2, #3
 8007324:	701a      	strb	r2, [r3, #0]
  idx++;
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	3301      	adds	r3, #1
 800732a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800732c:	e013      	b.n	8007356 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	4413      	add	r3, r2
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	7812      	ldrb	r2, [r2, #0]
 8007338:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3301      	adds	r3, #1
 800733e:	613b      	str	r3, [r7, #16]
    idx++;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	3301      	adds	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4413      	add	r3, r2
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	3301      	adds	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e7      	bne.n	800732e <USBD_GetString+0x52>
 800735e:	e000      	b.n	8007362 <USBD_GetString+0x86>
    return;
 8007360:	bf00      	nop
  }
}
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007378:	e005      	b.n	8007386 <USBD_GetLen+0x1e>
  {
    len++;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	3301      	adds	r3, #1
 800737e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3301      	adds	r3, #1
 8007384:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f5      	bne.n	800737a <USBD_GetLen+0x12>
  }

  return len;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	2100      	movs	r1, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fcf9 	bl	8007dba <USBD_LL_Transmit>

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	2100      	movs	r1, #0
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 fce8 	bl	8007dba <USBD_LL_Transmit>

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2203      	movs	r2, #3
 8007404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	2100      	movs	r1, #0
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fcec 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	2100      	movs	r1, #0
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 fcdb 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2204      	movs	r2, #4
 800745c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007460:	2300      	movs	r3, #0
 8007462:	2200      	movs	r2, #0
 8007464:	2100      	movs	r1, #0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fca7 	bl	8007dba <USBD_LL_Transmit>

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2205      	movs	r2, #5
 8007482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007486:	2300      	movs	r3, #0
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fcb5 	bl	8007dfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074a0:	2200      	movs	r2, #0
 80074a2:	4912      	ldr	r1, [pc, #72]	; (80074ec <MX_USB_DEVICE_Init+0x50>)
 80074a4:	4812      	ldr	r0, [pc, #72]	; (80074f0 <MX_USB_DEVICE_Init+0x54>)
 80074a6:	f7fe fd07 	bl	8005eb8 <USBD_Init>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d001      	beq.n	80074b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074b0:	f7f9 f9da 	bl	8000868 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80074b4:	490f      	ldr	r1, [pc, #60]	; (80074f4 <MX_USB_DEVICE_Init+0x58>)
 80074b6:	480e      	ldr	r0, [pc, #56]	; (80074f0 <MX_USB_DEVICE_Init+0x54>)
 80074b8:	f7fe fd2e 	bl	8005f18 <USBD_RegisterClass>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074c2:	f7f9 f9d1 	bl	8000868 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80074c6:	490c      	ldr	r1, [pc, #48]	; (80074f8 <MX_USB_DEVICE_Init+0x5c>)
 80074c8:	4809      	ldr	r0, [pc, #36]	; (80074f0 <MX_USB_DEVICE_Init+0x54>)
 80074ca:	f7fe fc1f 	bl	8005d0c <USBD_CDC_RegisterInterface>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074d4:	f7f9 f9c8 	bl	8000868 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074d8:	4805      	ldr	r0, [pc, #20]	; (80074f0 <MX_USB_DEVICE_Init+0x54>)
 80074da:	f7fe fd53 	bl	8005f84 <USBD_Start>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074e4:	f7f9 f9c0 	bl	8000868 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074e8:	bf00      	nop
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	200000ac 	.word	0x200000ac
 80074f0:	20000394 	.word	0x20000394
 80074f4:	20000018 	.word	0x20000018
 80074f8:	20000098 	.word	0x20000098

080074fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007500:	2200      	movs	r2, #0
 8007502:	4905      	ldr	r1, [pc, #20]	; (8007518 <CDC_Init_FS+0x1c>)
 8007504:	4805      	ldr	r0, [pc, #20]	; (800751c <CDC_Init_FS+0x20>)
 8007506:	f7fe fc1b 	bl	8005d40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800750a:	4905      	ldr	r1, [pc, #20]	; (8007520 <CDC_Init_FS+0x24>)
 800750c:	4803      	ldr	r0, [pc, #12]	; (800751c <CDC_Init_FS+0x20>)
 800750e:	f7fe fc39 	bl	8005d84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007512:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007514:	4618      	mov	r0, r3
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000e70 	.word	0x20000e70
 800751c:	20000394 	.word	0x20000394
 8007520:	20000670 	.word	0x20000670

08007524 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007528:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800752a:	4618      	mov	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	6039      	str	r1, [r7, #0]
 800753e:	71fb      	strb	r3, [r7, #7]
 8007540:	4613      	mov	r3, r2
 8007542:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b23      	cmp	r3, #35	; 0x23
 8007548:	d84a      	bhi.n	80075e0 <CDC_Control_FS+0xac>
 800754a:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <CDC_Control_FS+0x1c>)
 800754c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007550:	080075e1 	.word	0x080075e1
 8007554:	080075e1 	.word	0x080075e1
 8007558:	080075e1 	.word	0x080075e1
 800755c:	080075e1 	.word	0x080075e1
 8007560:	080075e1 	.word	0x080075e1
 8007564:	080075e1 	.word	0x080075e1
 8007568:	080075e1 	.word	0x080075e1
 800756c:	080075e1 	.word	0x080075e1
 8007570:	080075e1 	.word	0x080075e1
 8007574:	080075e1 	.word	0x080075e1
 8007578:	080075e1 	.word	0x080075e1
 800757c:	080075e1 	.word	0x080075e1
 8007580:	080075e1 	.word	0x080075e1
 8007584:	080075e1 	.word	0x080075e1
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075e1 	.word	0x080075e1
 8007590:	080075e1 	.word	0x080075e1
 8007594:	080075e1 	.word	0x080075e1
 8007598:	080075e1 	.word	0x080075e1
 800759c:	080075e1 	.word	0x080075e1
 80075a0:	080075e1 	.word	0x080075e1
 80075a4:	080075e1 	.word	0x080075e1
 80075a8:	080075e1 	.word	0x080075e1
 80075ac:	080075e1 	.word	0x080075e1
 80075b0:	080075e1 	.word	0x080075e1
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e1 	.word	0x080075e1
 80075c0:	080075e1 	.word	0x080075e1
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	080075e1 	.word	0x080075e1
 80075d0:	080075e1 	.word	0x080075e1
 80075d4:	080075e1 	.word	0x080075e1
 80075d8:	080075e1 	.word	0x080075e1
 80075dc:	080075e1 	.word	0x080075e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075e0:	bf00      	nop
  }

  return (USBD_OK);
 80075e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4805      	ldr	r0, [pc, #20]	; (8007614 <CDC_Receive_FS+0x24>)
 80075fe:	f7fe fbc1 	bl	8005d84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007602:	4804      	ldr	r0, [pc, #16]	; (8007614 <CDC_Receive_FS+0x24>)
 8007604:	f7fe fc22 	bl	8005e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007608:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000394 	.word	0x20000394

08007618 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007628:	4b0d      	ldr	r3, [pc, #52]	; (8007660 <CDC_Transmit_FS+0x48>)
 800762a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800762e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800763a:	2301      	movs	r3, #1
 800763c:	e00b      	b.n	8007656 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800763e:	887b      	ldrh	r3, [r7, #2]
 8007640:	461a      	mov	r2, r3
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	4806      	ldr	r0, [pc, #24]	; (8007660 <CDC_Transmit_FS+0x48>)
 8007646:	f7fe fb7b 	bl	8005d40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <CDC_Transmit_FS+0x48>)
 800764c:	f7fe fbb8 	bl	8005dc0 <USBD_CDC_TransmitPacket>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007654:	7bfb      	ldrb	r3, [r7, #15]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000394 	.word	0x20000394

08007664 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800767a:	4618      	mov	r0, r3
 800767c:	371c      	adds	r7, #28
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
	...

08007688 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2212      	movs	r2, #18
 8007698:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800769a:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800769c:	4618      	mov	r0, r3
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	200000c8 	.word	0x200000c8

080076ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	4603      	mov	r3, r0
 80076b4:	6039      	str	r1, [r7, #0]
 80076b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2204      	movs	r2, #4
 80076bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076be:	4b03      	ldr	r3, [pc, #12]	; (80076cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	200000dc 	.word	0x200000dc

080076d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	4603      	mov	r3, r0
 80076d8:	6039      	str	r1, [r7, #0]
 80076da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4907      	ldr	r1, [pc, #28]	; (8007704 <USBD_FS_ProductStrDescriptor+0x34>)
 80076e6:	4808      	ldr	r0, [pc, #32]	; (8007708 <USBD_FS_ProductStrDescriptor+0x38>)
 80076e8:	f7ff fdf8 	bl	80072dc <USBD_GetString>
 80076ec:	e004      	b.n	80076f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4904      	ldr	r1, [pc, #16]	; (8007704 <USBD_FS_ProductStrDescriptor+0x34>)
 80076f2:	4805      	ldr	r0, [pc, #20]	; (8007708 <USBD_FS_ProductStrDescriptor+0x38>)
 80076f4:	f7ff fdf2 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f8:	4b02      	ldr	r3, [pc, #8]	; (8007704 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20001670 	.word	0x20001670
 8007708:	08007f6c 	.word	0x08007f6c

0800770c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	6039      	str	r1, [r7, #0]
 8007716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007718:	683a      	ldr	r2, [r7, #0]
 800771a:	4904      	ldr	r1, [pc, #16]	; (800772c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800771c:	4804      	ldr	r0, [pc, #16]	; (8007730 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800771e:	f7ff fddd 	bl	80072dc <USBD_GetString>
  return USBD_StrDesc;
 8007722:	4b02      	ldr	r3, [pc, #8]	; (800772c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20001670 	.word	0x20001670
 8007730:	08007f84 	.word	0x08007f84

08007734 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	6039      	str	r1, [r7, #0]
 800773e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	221a      	movs	r2, #26
 8007744:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007746:	f000 f843 	bl	80077d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800774a:	4b02      	ldr	r3, [pc, #8]	; (8007754 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200000e0 	.word	0x200000e0

08007758 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d105      	bne.n	8007776 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	4907      	ldr	r1, [pc, #28]	; (800778c <USBD_FS_ConfigStrDescriptor+0x34>)
 800776e:	4808      	ldr	r0, [pc, #32]	; (8007790 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007770:	f7ff fdb4 	bl	80072dc <USBD_GetString>
 8007774:	e004      	b.n	8007780 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	4904      	ldr	r1, [pc, #16]	; (800778c <USBD_FS_ConfigStrDescriptor+0x34>)
 800777a:	4805      	ldr	r0, [pc, #20]	; (8007790 <USBD_FS_ConfigStrDescriptor+0x38>)
 800777c:	f7ff fdae 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007780:	4b02      	ldr	r3, [pc, #8]	; (800778c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	20001670 	.word	0x20001670
 8007790:	08007f98 	.word	0x08007f98

08007794 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	6039      	str	r1, [r7, #0]
 800779e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4907      	ldr	r1, [pc, #28]	; (80077c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077aa:	4808      	ldr	r0, [pc, #32]	; (80077cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077ac:	f7ff fd96 	bl	80072dc <USBD_GetString>
 80077b0:	e004      	b.n	80077bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077b6:	4805      	ldr	r0, [pc, #20]	; (80077cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077b8:	f7ff fd90 	bl	80072dc <USBD_GetString>
  }
  return USBD_StrDesc;
 80077bc:	4b02      	ldr	r3, [pc, #8]	; (80077c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20001670 	.word	0x20001670
 80077cc:	08007fa4 	.word	0x08007fa4

080077d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077d6:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <Get_SerialNum+0x44>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077dc:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <Get_SerialNum+0x48>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077e2:	4b0e      	ldr	r3, [pc, #56]	; (800781c <Get_SerialNum+0x4c>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4413      	add	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077f6:	2208      	movs	r2, #8
 80077f8:	4909      	ldr	r1, [pc, #36]	; (8007820 <Get_SerialNum+0x50>)
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 f814 	bl	8007828 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007800:	2204      	movs	r2, #4
 8007802:	4908      	ldr	r1, [pc, #32]	; (8007824 <Get_SerialNum+0x54>)
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f000 f80f 	bl	8007828 <IntToUnicode>
  }
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	1fff7a10 	.word	0x1fff7a10
 8007818:	1fff7a14 	.word	0x1fff7a14
 800781c:	1fff7a18 	.word	0x1fff7a18
 8007820:	200000e2 	.word	0x200000e2
 8007824:	200000f2 	.word	0x200000f2

08007828 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	4613      	mov	r3, r2
 8007834:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]
 800783e:	e027      	b.n	8007890 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	0f1b      	lsrs	r3, r3, #28
 8007844:	2b09      	cmp	r3, #9
 8007846:	d80b      	bhi.n	8007860 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	0f1b      	lsrs	r3, r3, #28
 800784c:	b2da      	uxtb	r2, r3
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4619      	mov	r1, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	440b      	add	r3, r1
 8007858:	3230      	adds	r2, #48	; 0x30
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e00a      	b.n	8007876 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	0f1b      	lsrs	r3, r3, #28
 8007864:	b2da      	uxtb	r2, r3
 8007866:	7dfb      	ldrb	r3, [r7, #23]
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4619      	mov	r1, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	440b      	add	r3, r1
 8007870:	3237      	adds	r2, #55	; 0x37
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	3301      	adds	r3, #1
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4413      	add	r3, r2
 8007886:	2200      	movs	r2, #0
 8007888:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	3301      	adds	r3, #1
 800788e:	75fb      	strb	r3, [r7, #23]
 8007890:	7dfa      	ldrb	r2, [r7, #23]
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	429a      	cmp	r2, r3
 8007896:	d3d3      	bcc.n	8007840 <IntToUnicode+0x18>
  }
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
	...

080078a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	609a      	str	r2, [r3, #8]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c8:	d147      	bne.n	800795a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	4b25      	ldr	r3, [pc, #148]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	4a24      	ldr	r2, [pc, #144]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	6313      	str	r3, [r2, #48]	; 0x30
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 80078dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80078e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80078ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ec:	2302      	movs	r3, #2
 80078ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078f4:	2303      	movs	r3, #3
 80078f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078f8:	230a      	movs	r3, #10
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	4619      	mov	r1, r3
 8007902:	4819      	ldr	r0, [pc, #100]	; (8007968 <HAL_PCD_MspInit+0xc0>)
 8007904:	f7f9 fe18 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8007908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800790c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007912:	2300      	movs	r3, #0
 8007914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007916:	f107 0314 	add.w	r3, r7, #20
 800791a:	4619      	mov	r1, r3
 800791c:	4812      	ldr	r0, [pc, #72]	; (8007968 <HAL_PCD_MspInit+0xc0>)
 800791e:	f7f9 fe0b 	bl	8001538 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007922:	4b10      	ldr	r3, [pc, #64]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	4a0f      	ldr	r2, [pc, #60]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 8007928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800792c:	6353      	str	r3, [r2, #52]	; 0x34
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 8007934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007936:	4a0b      	ldr	r2, [pc, #44]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 8007938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800793c:	6453      	str	r3, [r2, #68]	; 0x44
 800793e:	4b09      	ldr	r3, [pc, #36]	; (8007964 <HAL_PCD_MspInit+0xbc>)
 8007940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007946:	60fb      	str	r3, [r7, #12]
 8007948:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	2043      	movs	r0, #67	; 0x43
 8007950:	f7f9 faa7 	bl	8000ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007954:	2043      	movs	r0, #67	; 0x43
 8007956:	f7f9 fac0 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800795a:	bf00      	nop
 800795c:	3728      	adds	r7, #40	; 0x28
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40023800 	.word	0x40023800
 8007968:	40020000 	.word	0x40020000

0800796c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe fb4b 	bl	800601e <USBD_LL_SetupStage>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	4619      	mov	r1, r3
 80079ba:	f7fe fb85 	bl	80060c8 <USBD_LL_DataOutStage>
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	4613      	mov	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	440b      	add	r3, r1
 80079e6:	334c      	adds	r3, #76	; 0x4c
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7fe fc1e 	bl	800622e <USBD_LL_DataInStage>
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fd52 	bl	80064b2 <USBD_LL_SOF>
}
 8007a0e:	bf00      	nop
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	73fb      	strb	r3, [r7, #15]
 8007a2e:	e008      	b.n	8007a42 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d102      	bne.n	8007a3e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
 8007a3c:	e001      	b.n	8007a42 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a3e:	f7f8 ff13 	bl	8000868 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fcf2 	bl	8006436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fc9a 	bl	8006392 <USBD_LL_Reset>
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fe fced 	bl	8006456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d005      	beq.n	8007aa8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a9c:	4b04      	ldr	r3, [pc, #16]	; (8007ab0 <HAL_PCD_SuspendCallback+0x48>)
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	4a03      	ldr	r2, [pc, #12]	; (8007ab0 <HAL_PCD_SuspendCallback+0x48>)
 8007aa2:	f043 0306 	orr.w	r3, r3, #6
 8007aa6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	e000ed00 	.word	0xe000ed00

08007ab4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7fe fcdd 	bl	8006482 <USBD_LL_Resume>
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fd35 	bl	8006556 <USBD_LL_IsoOUTIncomplete>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fcf1 	bl	80064f2 <USBD_LL_IsoINIncomplete>
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fd47 	bl	80065ba <USBD_LL_DevConnected>
}
 8007b2c:	bf00      	nop
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe fd44 	bl	80065d0 <USBD_LL_DevDisconnected>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d13c      	bne.n	8007bda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b60:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a1e      	ldr	r2, [pc, #120]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b6c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b70:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b72:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b7e:	4b19      	ldr	r3, [pc, #100]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b80:	2202      	movs	r2, #2
 8007b82:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b84:	4b17      	ldr	r3, [pc, #92]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b8a:	4b16      	ldr	r3, [pc, #88]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b90:	4b14      	ldr	r3, [pc, #80]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b96:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b9c:	4b11      	ldr	r3, [pc, #68]	; (8007be4 <USBD_LL_Init+0x94>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ba2:	4b10      	ldr	r3, [pc, #64]	; (8007be4 <USBD_LL_Init+0x94>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ba8:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <USBD_LL_Init+0x94>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bae:	480d      	ldr	r0, [pc, #52]	; (8007be4 <USBD_LL_Init+0x94>)
 8007bb0:	f7f9 fe87 	bl	80018c2 <HAL_PCD_Init>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bba:	f7f8 fe55 	bl	8000868 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bbe:	2180      	movs	r1, #128	; 0x80
 8007bc0:	4808      	ldr	r0, [pc, #32]	; (8007be4 <USBD_LL_Init+0x94>)
 8007bc2:	f7fb f8de 	bl	8002d82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007bc6:	2240      	movs	r2, #64	; 0x40
 8007bc8:	2100      	movs	r1, #0
 8007bca:	4806      	ldr	r0, [pc, #24]	; (8007be4 <USBD_LL_Init+0x94>)
 8007bcc:	f7fb f892 	bl	8002cf4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4803      	ldr	r0, [pc, #12]	; (8007be4 <USBD_LL_Init+0x94>)
 8007bd6:	f7fb f88d 	bl	8002cf4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20001870 	.word	0x20001870

08007be8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7f9 ff7c 	bl	8001afc <HAL_PCD_Start>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f942 	bl	8007e94 <USBD_Get_USB_Status>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	4608      	mov	r0, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	70fb      	strb	r3, [r7, #3]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70bb      	strb	r3, [r7, #2]
 8007c34:	4613      	mov	r3, r2
 8007c36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c46:	78bb      	ldrb	r3, [r7, #2]
 8007c48:	883a      	ldrh	r2, [r7, #0]
 8007c4a:	78f9      	ldrb	r1, [r7, #3]
 8007c4c:	f7fa fc4d 	bl	80024ea <HAL_PCD_EP_Open>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f91c 	bl	8007e94 <USBD_Get_USB_Status>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	4611      	mov	r1, r2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fa fc96 	bl	80025ba <HAL_PCD_EP_Close>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f8fd 	bl	8007e94 <USBD_Get_USB_Status>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fa fd6e 	bl	80027a8 <HAL_PCD_EP_SetStall>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 f8de 	bl	8007e94 <USBD_Get_USB_Status>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fa fdb3 	bl	8002870 <HAL_PCD_EP_ClrStall>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f8bf 	bl	8007e94 <USBD_Get_USB_Status>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da0b      	bge.n	8007d58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d46:	68f9      	ldr	r1, [r7, #12]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	440b      	add	r3, r1
 8007d52:	333e      	adds	r3, #62	; 0x3e
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	e00b      	b.n	8007d70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	4613      	mov	r3, r2
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7fa fb80 	bl	80024a0 <HAL_PCD_SetAddress>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f874 	bl	8007e94 <USBD_Get_USB_Status>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b086      	sub	sp, #24
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dd8:	7af9      	ldrb	r1, [r7, #11]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	f7fa fc99 	bl	8002714 <HAL_PCD_EP_Transmit>
 8007de2:	4603      	mov	r3, r0
 8007de4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f853 	bl	8007e94 <USBD_Get_USB_Status>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3718      	adds	r7, #24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e1a:	7af9      	ldrb	r1, [r7, #11]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	f7fa fc15 	bl	800264e <HAL_PCD_EP_Receive>
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f832 	bl	8007e94 <USBD_Get_USB_Status>
 8007e30:	4603      	mov	r3, r0
 8007e32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e34:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
 8007e46:	460b      	mov	r3, r1
 8007e48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e50:	78fa      	ldrb	r2, [r7, #3]
 8007e52:	4611      	mov	r1, r2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fa fc45 	bl	80026e4 <HAL_PCD_EP_GetRxCount>
 8007e5a:	4603      	mov	r3, r0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e6c:	4b03      	ldr	r3, [pc, #12]	; (8007e7c <USBD_static_malloc+0x18>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	20001d7c 	.word	0x20001d7c

08007e80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]

}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d817      	bhi.n	8007ed8 <USBD_Get_USB_Status+0x44>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <USBD_Get_USB_Status+0x1c>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007ec1 	.word	0x08007ec1
 8007eb4:	08007ec7 	.word	0x08007ec7
 8007eb8:	08007ecd 	.word	0x08007ecd
 8007ebc:	08007ed3 	.word	0x08007ed3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ec4:	e00b      	b.n	8007ede <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	73fb      	strb	r3, [r7, #15]
    break;
 8007eca:	e008      	b.n	8007ede <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	e005      	b.n	8007ede <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed6:	e002      	b.n	8007ede <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	bf00      	nop
  }
  return usb_status;
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <__libc_init_array>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4d0d      	ldr	r5, [pc, #52]	; (8007f24 <__libc_init_array+0x38>)
 8007ef0:	4c0d      	ldr	r4, [pc, #52]	; (8007f28 <__libc_init_array+0x3c>)
 8007ef2:	1b64      	subs	r4, r4, r5
 8007ef4:	10a4      	asrs	r4, r4, #2
 8007ef6:	2600      	movs	r6, #0
 8007ef8:	42a6      	cmp	r6, r4
 8007efa:	d109      	bne.n	8007f10 <__libc_init_array+0x24>
 8007efc:	4d0b      	ldr	r5, [pc, #44]	; (8007f2c <__libc_init_array+0x40>)
 8007efe:	4c0c      	ldr	r4, [pc, #48]	; (8007f30 <__libc_init_array+0x44>)
 8007f00:	f000 f820 	bl	8007f44 <_init>
 8007f04:	1b64      	subs	r4, r4, r5
 8007f06:	10a4      	asrs	r4, r4, #2
 8007f08:	2600      	movs	r6, #0
 8007f0a:	42a6      	cmp	r6, r4
 8007f0c:	d105      	bne.n	8007f1a <__libc_init_array+0x2e>
 8007f0e:	bd70      	pop	{r4, r5, r6, pc}
 8007f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f14:	4798      	blx	r3
 8007f16:	3601      	adds	r6, #1
 8007f18:	e7ee      	b.n	8007ef8 <__libc_init_array+0xc>
 8007f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f1e:	4798      	blx	r3
 8007f20:	3601      	adds	r6, #1
 8007f22:	e7f2      	b.n	8007f0a <__libc_init_array+0x1e>
 8007f24:	08007fd4 	.word	0x08007fd4
 8007f28:	08007fd4 	.word	0x08007fd4
 8007f2c:	08007fd4 	.word	0x08007fd4
 8007f30:	08007fd8 	.word	0x08007fd8

08007f34 <memset>:
 8007f34:	4402      	add	r2, r0
 8007f36:	4603      	mov	r3, r0
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d100      	bne.n	8007f3e <memset+0xa>
 8007f3c:	4770      	bx	lr
 8007f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f42:	e7f9      	b.n	8007f38 <memset+0x4>

08007f44 <_init>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	bf00      	nop
 8007f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4a:	bc08      	pop	{r3}
 8007f4c:	469e      	mov	lr, r3
 8007f4e:	4770      	bx	lr

08007f50 <_fini>:
 8007f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f52:	bf00      	nop
 8007f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f56:	bc08      	pop	{r3}
 8007f58:	469e      	mov	lr, r3
 8007f5a:	4770      	bx	lr
